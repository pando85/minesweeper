<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="821.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="821.00"> </text><svg id="frames" x="10" width="1180"><g><title>alloc_vmap_area (1,041 samples, 0.11%)</title><rect x="0.0879%" y="613" width="0.1061%" height="15" fill="rgb(227,0,7)"/><text x="0.3379%" y="623.50"></text></g><g><title>__get_vm_area_node.constprop.0 (1,063 samples, 0.11%)</title><rect x="0.0864%" y="629" width="0.1083%" height="15" fill="rgb(217,0,24)"/><text x="0.3364%" y="639.50"></text></g><g><title>__vmalloc_node_range (1,434 samples, 0.15%)</title><rect x="0.0511%" y="645" width="0.1461%" height="15" fill="rgb(221,193,54)"/><text x="0.3011%" y="655.50"></text></g><g><title>perf_try_init_event (1,256 samples, 0.13%)</title><rect x="0.5018%" y="581" width="0.1280%" height="15" fill="rgb(248,212,6)"/><text x="0.7518%" y="591.50"></text></g><g><title>x86_pmu_event_init (1,240 samples, 0.13%)</title><rect x="0.5034%" y="565" width="0.1263%" height="15" fill="rgb(208,68,35)"/><text x="0.7534%" y="575.50"></text></g><g><title>perf_event_alloc (2,508 samples, 0.26%)</title><rect x="0.3754%" y="597" width="0.2555%" height="15" fill="rgb(232,128,0)"/><text x="0.6254%" y="607.50"></text></g><g><title>inherit_task_group.isra.0 (3,528 samples, 0.36%)</title><rect x="0.2723%" y="629" width="0.3594%" height="15" fill="rgb(207,160,47)"/><text x="0.5223%" y="639.50"></text></g><g><title>inherit_event.constprop.0 (3,474 samples, 0.35%)</title><rect x="0.2778%" y="613" width="0.3539%" height="15" fill="rgb(228,23,34)"/><text x="0.5278%" y="623.50"></text></g><g><title>perf_event_init_task (3,583 samples, 0.37%)</title><rect x="0.2697%" y="645" width="0.3650%" height="15" fill="rgb(218,30,26)"/><text x="0.5197%" y="655.50"></text></g><g><title>copy_process (5,879 samples, 0.60%)</title><rect x="0.0440%" y="661" width="0.5990%" height="15" fill="rgb(220,122,19)"/><text x="0.2940%" y="671.50"></text></g><g><title>__do_sys_clone (6,384 samples, 0.65%)</title><rect x="0.0429%" y="693" width="0.6504%" height="15" fill="rgb(250,228,42)"/><text x="0.2929%" y="703.50"></text></g><g><title>kernel_clone (6,380 samples, 0.65%)</title><rect x="0.0433%" y="677" width="0.6500%" height="15" fill="rgb(240,193,28)"/><text x="0.2933%" y="687.50"></text></g><g><title>entry_SYSCALL_64 (6,395 samples, 0.65%)</title><rect x="0.0424%" y="725" width="0.6515%" height="15" fill="rgb(216,20,37)"/><text x="0.2924%" y="735.50"></text></g><g><title>do_syscall_64 (6,392 samples, 0.65%)</title><rect x="0.0427%" y="709" width="0.6512%" height="15" fill="rgb(206,188,39)"/><text x="0.2927%" y="719.50"></text></g><g><title>__GI___clone (6,422 samples, 0.65%)</title><rect x="0.0398%" y="741" width="0.6543%" height="15" fill="rgb(217,207,13)"/><text x="0.2898%" y="751.50"></text></g><g><title>[unknown] (9,596 samples, 0.98%)</title><rect x="0.0377%" y="757" width="0.9777%" height="15" fill="rgb(231,73,38)"/><text x="0.2877%" y="767.50"></text></g><g><title>entry_SYSCALL_64 (8,555 samples, 0.87%)</title><rect x="10.4330%" y="741" width="0.8716%" height="15" fill="rgb(225,20,46)"/><text x="10.6830%" y="751.50"></text></g><g><title>_raw_spin_lock_irq (6,938 samples, 0.71%)</title><rect x="11.3723%" y="709" width="0.7069%" height="15" fill="rgb(210,31,41)"/><text x="11.6223%" y="719.50"></text></g><g><title>native_queued_spin_lock_slowpath (6,575 samples, 0.67%)</title><rect x="11.4093%" y="693" width="0.6699%" height="15" fill="rgb(221,200,47)"/><text x="11.6593%" y="703.50"></text></g><g><title>calculate_sigpending (7,566 samples, 0.77%)</title><rect x="11.3410%" y="725" width="0.7708%" height="15" fill="rgb(226,26,5)"/><text x="11.5910%" y="735.50"></text></g><g><title>enqueue_task_fair (1,449 samples, 0.15%)</title><rect x="12.2383%" y="597" width="0.1476%" height="15" fill="rgb(249,33,26)"/><text x="12.4883%" y="607.50"></text></g><g><title>ttwu_do_activate (1,783 samples, 0.18%)</title><rect x="12.2373%" y="629" width="0.1817%" height="15" fill="rgb(235,183,28)"/><text x="12.4873%" y="639.50"></text></g><g><title>enqueue_task (1,783 samples, 0.18%)</title><rect x="12.2373%" y="613" width="0.1817%" height="15" fill="rgb(221,5,38)"/><text x="12.4873%" y="623.50"></text></g><g><title>asm_sysvec_call_function_single (1,946 samples, 0.20%)</title><rect x="12.2253%" y="693" width="0.1983%" height="15" fill="rgb(247,18,42)"/><text x="12.4753%" y="703.50"></text></g><g><title>sysvec_call_function_single (1,879 samples, 0.19%)</title><rect x="12.2321%" y="677" width="0.1914%" height="15" fill="rgb(241,131,45)"/><text x="12.4821%" y="687.50"></text></g><g><title>__sysvec_call_function_single (1,878 samples, 0.19%)</title><rect x="12.2322%" y="661" width="0.1913%" height="15" fill="rgb(249,31,29)"/><text x="12.4822%" y="671.50"></text></g><g><title>sched_ttwu_pending (1,854 samples, 0.19%)</title><rect x="12.2346%" y="645" width="0.1889%" height="15" fill="rgb(225,111,53)"/><text x="12.4846%" y="655.50"></text></g><g><title>put_task_stack (2,121 samples, 0.22%)</title><rect x="12.4242%" y="693" width="0.2161%" height="15" fill="rgb(238,160,17)"/><text x="12.6742%" y="703.50"></text></g><g><title>finish_task_switch.isra.0 (5,250 samples, 0.53%)</title><rect x="12.1163%" y="709" width="0.5349%" height="15" fill="rgb(214,148,48)"/><text x="12.3663%" y="719.50"></text></g><g><title>schedule_tail (5,696 samples, 0.58%)</title><rect x="12.1119%" y="725" width="0.5803%" height="15" fill="rgb(232,36,49)"/><text x="12.3619%" y="735.50"></text></g><g><title>mem_cgroup_handle_over_high (1,870 samples, 0.19%)</title><rect x="14.2620%" y="693" width="0.1905%" height="15" fill="rgb(209,103,24)"/><text x="14.5120%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (472,551 samples, 48.14%)</title><rect x="12.7310%" y="709" width="48.1441%" height="15" fill="rgb(229,88,8)"/><text x="12.9810%" y="719.50">exit_to_user_mode_prepare</text></g><g><title>switch_fpu_return (455,654 samples, 46.42%)</title><rect x="14.4525%" y="693" width="46.4226%" height="15" fill="rgb(213,181,19)"/><text x="14.7025%" y="703.50">switch_fpu_return</text></g><g><title>restore_fpregs_from_fpstate (443,300 samples, 45.16%)</title><rect x="15.7111%" y="677" width="45.1640%" height="15" fill="rgb(254,191,54)"/><text x="15.9611%" y="687.50">restore_fpregs_from_fpstate</text></g><g><title>ret_from_fork (490,781 samples, 50.00%)</title><rect x="11.3276%" y="741" width="50.0014%" height="15" fill="rgb(241,83,37)"/><text x="11.5776%" y="751.50">ret_from_fork</text></g><g><title>syscall_exit_to_user_mode (477,387 samples, 48.64%)</title><rect x="12.6922%" y="725" width="48.6368%" height="15" fill="rgb(233,36,39)"/><text x="12.9422%" y="735.50">syscall_exit_to_user_mode</text></g><g><title>syscall_exit_work (4,455 samples, 0.45%)</title><rect x="60.8751%" y="709" width="0.4539%" height="15" fill="rgb(226,3,54)"/><text x="61.1251%" y="719.50"></text></g><g><title>audit_reset_context.part.0.constprop.0 (3,701 samples, 0.38%)</title><rect x="60.9519%" y="693" width="0.3771%" height="15" fill="rgb(245,192,40)"/><text x="61.2019%" y="703.50"></text></g><g><title>unroll_tree_refs (1,425 samples, 0.15%)</title><rect x="61.1838%" y="677" width="0.1452%" height="15" fill="rgb(238,167,29)"/><text x="61.4338%" y="687.50"></text></g><g><title>__GI___ctype_init (17,012 samples, 1.73%)</title><rect x="66.6588%" y="725" width="1.7332%" height="15" fill="rgb(232,182,51)"/><text x="66.9088%" y="735.50"></text></g><g><title>find_vma_prev (5,130 samples, 0.52%)</title><rect x="68.4952%" y="645" width="0.5227%" height="15" fill="rgb(231,60,39)"/><text x="68.7452%" y="655.50"></text></g><g><title>unmap_page_range (5,124 samples, 0.52%)</title><rect x="69.1715%" y="629" width="0.5220%" height="15" fill="rgb(208,69,12)"/><text x="69.4215%" y="639.50"></text></g><g><title>__x64_sys_madvise (12,528 samples, 1.28%)</title><rect x="68.4457%" y="677" width="1.2764%" height="15" fill="rgb(235,93,37)"/><text x="68.6957%" y="687.50"></text></g><g><title>do_madvise (12,381 samples, 1.26%)</title><rect x="68.4607%" y="661" width="1.2614%" height="15" fill="rgb(213,116,39)"/><text x="68.7107%" y="671.50"></text></g><g><title>zap_page_range (6,158 samples, 0.63%)</title><rect x="69.0947%" y="645" width="0.6274%" height="15" fill="rgb(222,207,29)"/><text x="69.3447%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (12,910 samples, 1.32%)</title><rect x="68.4279%" y="709" width="1.3153%" height="15" fill="rgb(206,96,30)"/><text x="68.6779%" y="719.50"></text></g><g><title>do_syscall_64 (12,794 samples, 1.30%)</title><rect x="68.4397%" y="693" width="1.3035%" height="15" fill="rgb(218,138,4)"/><text x="68.6897%" y="703.50"></text></g><g><title>__GI_madvise (12,952 samples, 1.32%)</title><rect x="68.4240%" y="725" width="1.3196%" height="15" fill="rgb(250,191,14)"/><text x="68.6740%" y="735.50"></text></g><g><title>__malloc_arena_thread_freeres (1,387 samples, 0.14%)</title><rect x="69.7986%" y="725" width="0.1413%" height="15" fill="rgb(239,60,40)"/><text x="70.0486%" y="735.50"></text></g><g><title>__free (1,042 samples, 0.11%)</title><rect x="69.8338%" y="709" width="0.1062%" height="15" fill="rgb(206,27,48)"/><text x="70.0838%" y="719.50"></text></g><g><title>do_futex (1,615 samples, 0.16%)</title><rect x="72.1176%" y="645" width="0.1645%" height="15" fill="rgb(225,35,8)"/><text x="72.3676%" y="655.50"></text></g><g><title>futex_wake (1,602 samples, 0.16%)</title><rect x="72.1189%" y="629" width="0.1632%" height="15" fill="rgb(250,213,24)"/><text x="72.3689%" y="639.50"></text></g><g><title>mm_release (2,617 samples, 0.27%)</title><rect x="72.0636%" y="661" width="0.2666%" height="15" fill="rgb(247,123,22)"/><text x="72.3136%" y="671.50"></text></g><g><title>[vmlinux] (6,138 samples, 0.63%)</title><rect x="71.8197%" y="693" width="0.6253%" height="15" fill="rgb(231,138,38)"/><text x="72.0697%" y="703.50"></text></g><g><title>do_exit (6,138 samples, 0.63%)</title><rect x="71.8197%" y="677" width="0.6253%" height="15" fill="rgb(231,145,46)"/><text x="72.0697%" y="687.50"></text></g><g><title>__x64_sys_rseq (17,881 samples, 1.82%)</title><rect x="72.4531%" y="693" width="1.8217%" height="15" fill="rgb(251,118,11)"/><text x="72.7031%" y="703.50">_..</text></g><g><title>__x64_sys_set_robust_list (1,563 samples, 0.16%)</title><rect x="74.3723%" y="693" width="0.1592%" height="15" fill="rgb(217,147,25)"/><text x="74.6223%" y="703.50"></text></g><g><title>syscall_enter_from_user_mode (1,354 samples, 0.14%)</title><rect x="74.5317%" y="693" width="0.1379%" height="15" fill="rgb(247,81,37)"/><text x="74.7817%" y="703.50"></text></g><g><title>__get_user_8 (34,586 samples, 3.52%)</title><rect x="78.8714%" y="645" width="3.5237%" height="15" fill="rgb(209,12,38)"/><text x="79.1214%" y="655.50">__g..</text></g><g><title>__put_user_nocheck_8 (11,678 samples, 1.19%)</title><rect x="82.4238%" y="645" width="1.1898%" height="15" fill="rgb(227,1,9)"/><text x="82.6738%" y="655.50"></text></g><g><title>__rseq_handle_notify_resume (66,905 samples, 6.82%)</title><rect x="76.7982%" y="661" width="6.8164%" height="15" fill="rgb(248,47,43)"/><text x="77.0482%" y="671.50">__rseq_ha..</text></g><g><title>blkcg_maybe_throttle_current (2,318 samples, 0.24%)</title><rect x="83.6147%" y="661" width="0.2362%" height="15" fill="rgb(221,10,30)"/><text x="83.8647%" y="671.50"></text></g><g><title>mem_cgroup_handle_over_high (2,516 samples, 0.26%)</title><rect x="83.8509%" y="661" width="0.2563%" height="15" fill="rgb(210,229,1)"/><text x="84.1009%" y="671.50"></text></g><g><title>exit_to_user_mode_prepare (89,501 samples, 9.12%)</title><rect x="74.9888%" y="677" width="9.1185%" height="15" fill="rgb(222,148,37)"/><text x="75.2388%" y="687.50">exit_to_user_..</text></g><g><title>syscall_exit_to_user_mode (100,668 samples, 10.26%)</title><rect x="74.6696%" y="693" width="10.2562%" height="15" fill="rgb(234,67,33)"/><text x="74.9196%" y="703.50">syscall_exit_to..</text></g><g><title>syscall_exit_work (8,034 samples, 0.82%)</title><rect x="84.1073%" y="677" width="0.8185%" height="15" fill="rgb(247,98,35)"/><text x="84.3573%" y="687.50"></text></g><g><title>__audit_syscall_exit (5,295 samples, 0.54%)</title><rect x="84.3864%" y="661" width="0.5395%" height="15" fill="rgb(247,138,52)"/><text x="84.6364%" y="671.50"></text></g><g><title>__audit_syscall_entry (3,283 samples, 0.33%)</title><rect x="85.1260%" y="677" width="0.3345%" height="15" fill="rgb(213,79,30)"/><text x="85.3760%" y="687.50"></text></g><g><title>entry_SYSCALL_64 (153,799 samples, 15.67%)</title><rect x="69.9439%" y="725" width="15.6692%" height="15" fill="rgb(246,177,23)"/><text x="70.1939%" y="735.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (144,250 samples, 14.70%)</title><rect x="70.9167%" y="709" width="14.6964%" height="15" fill="rgb(230,62,27)"/><text x="71.1667%" y="719.50">do_syscall_64</text></g><g><title>syscall_trace_enter.constprop.0 (6,746 samples, 0.69%)</title><rect x="84.9258%" y="693" width="0.6873%" height="15" fill="rgb(216,154,8)"/><text x="85.1758%" y="703.50"></text></g><g><title>ktime_get_coarse_real_ts64 (1,496 samples, 0.15%)</title><rect x="85.4607%" y="677" width="0.1524%" height="15" fill="rgb(244,35,45)"/><text x="85.7107%" y="687.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (2,502 samples, 0.25%)</title><rect x="85.7398%" y="309" width="0.2549%" height="15" fill="rgb(251,115,12)"/><text x="85.9898%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,502 samples, 0.25%)</title><rect x="85.7398%" y="293" width="0.2549%" height="15" fill="rgb(240,54,50)"/><text x="85.9898%" y="303.50"></text></g><g><title>rayon_core::join::join_context (2,402 samples, 0.24%)</title><rect x="85.7500%" y="277" width="0.2447%" height="15" fill="rgb(233,84,52)"/><text x="86.0000%" y="287.50"></text></g><g><title>rayon_core::registry::in_worker (2,402 samples, 0.24%)</title><rect x="85.7500%" y="261" width="0.2447%" height="15" fill="rgb(207,117,47)"/><text x="86.0000%" y="271.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (2,402 samples, 0.24%)</title><rect x="85.7500%" y="245" width="0.2447%" height="15" fill="rgb(249,43,39)"/><text x="86.0000%" y="255.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (1,511 samples, 0.15%)</title><rect x="85.8407%" y="229" width="0.1539%" height="15" fill="rgb(209,38,44)"/><text x="86.0907%" y="239.50"></text></g><g><title>std::panic::catch_unwind (1,511 samples, 0.15%)</title><rect x="85.8407%" y="213" width="0.1539%" height="15" fill="rgb(236,212,23)"/><text x="86.0907%" y="223.50"></text></g><g><title>std::panicking::try (1,511 samples, 0.15%)</title><rect x="85.8407%" y="197" width="0.1539%" height="15" fill="rgb(242,79,21)"/><text x="86.0907%" y="207.50"></text></g><g><title>std::panicking::try::do_call (1,511 samples, 0.15%)</title><rect x="85.8407%" y="181" width="0.1539%" height="15" fill="rgb(211,96,35)"/><text x="86.0907%" y="191.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,511 samples, 0.15%)</title><rect x="85.8407%" y="165" width="0.1539%" height="15" fill="rgb(253,215,40)"/><text x="86.0907%" y="175.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (1,511 samples, 0.15%)</title><rect x="85.8407%" y="149" width="0.1539%" height="15" fill="rgb(211,81,21)"/><text x="86.0907%" y="159.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (1,511 samples, 0.15%)</title><rect x="85.8407%" y="133" width="0.1539%" height="15" fill="rgb(208,190,38)"/><text x="86.0907%" y="143.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,511 samples, 0.15%)</title><rect x="85.8407%" y="117" width="0.1539%" height="15" fill="rgb(235,213,38)"/><text x="86.0907%" y="127.50"></text></g><g><title>rayon_core::join::join_context (1,420 samples, 0.14%)</title><rect x="85.8500%" y="101" width="0.1447%" height="15" fill="rgb(237,122,38)"/><text x="86.1000%" y="111.50"></text></g><g><title>rayon_core::registry::in_worker (1,420 samples, 0.14%)</title><rect x="85.8500%" y="85" width="0.1447%" height="15" fill="rgb(244,218,35)"/><text x="86.1000%" y="95.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (1,420 samples, 0.14%)</title><rect x="85.8500%" y="69" width="0.1447%" height="15" fill="rgb(240,68,47)"/><text x="86.1000%" y="79.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (2,522 samples, 0.26%)</title><rect x="85.7398%" y="325" width="0.2569%" height="15" fill="rgb(210,16,53)"/><text x="85.9898%" y="335.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (2,544 samples, 0.26%)</title><rect x="85.7397%" y="469" width="0.2592%" height="15" fill="rgb(235,124,12)"/><text x="85.9897%" y="479.50"></text></g><g><title>rayon_core::job::JobRef::execute (2,544 samples, 0.26%)</title><rect x="85.7397%" y="453" width="0.2592%" height="15" fill="rgb(224,169,11)"/><text x="85.9897%" y="463.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (2,544 samples, 0.26%)</title><rect x="85.7397%" y="437" width="0.2592%" height="15" fill="rgb(250,166,2)"/><text x="85.9897%" y="447.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (2,543 samples, 0.26%)</title><rect x="85.7398%" y="421" width="0.2591%" height="15" fill="rgb(242,216,29)"/><text x="85.9898%" y="431.50"></text></g><g><title>std::panic::catch_unwind (2,543 samples, 0.26%)</title><rect x="85.7398%" y="405" width="0.2591%" height="15" fill="rgb(230,116,27)"/><text x="85.9898%" y="415.50"></text></g><g><title>std::panicking::try (2,543 samples, 0.26%)</title><rect x="85.7398%" y="389" width="0.2591%" height="15" fill="rgb(228,99,48)"/><text x="85.9898%" y="399.50"></text></g><g><title>std::panicking::try::do_call (2,543 samples, 0.26%)</title><rect x="85.7398%" y="373" width="0.2591%" height="15" fill="rgb(253,11,6)"/><text x="85.9898%" y="383.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,543 samples, 0.26%)</title><rect x="85.7398%" y="357" width="0.2591%" height="15" fill="rgb(247,143,39)"/><text x="85.9898%" y="367.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (2,543 samples, 0.26%)</title><rect x="85.7398%" y="341" width="0.2591%" height="15" fill="rgb(236,97,10)"/><text x="85.9898%" y="351.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (3,766 samples, 0.38%)</title><rect x="85.7292%" y="549" width="0.3837%" height="15" fill="rgb(233,208,19)"/><text x="85.9792%" y="559.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (3,766 samples, 0.38%)</title><rect x="85.7292%" y="533" width="0.3837%" height="15" fill="rgb(216,164,2)"/><text x="85.9792%" y="543.50"></text></g><g><title>rayon_core::registry::main_loop (3,766 samples, 0.38%)</title><rect x="85.7292%" y="517" width="0.3837%" height="15" fill="rgb(220,129,5)"/><text x="85.9792%" y="527.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (3,765 samples, 0.38%)</title><rect x="85.7293%" y="501" width="0.3836%" height="15" fill="rgb(242,17,10)"/><text x="85.9793%" y="511.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (3,765 samples, 0.38%)</title><rect x="85.7293%" y="485" width="0.3836%" height="15" fill="rgb(242,107,0)"/><text x="85.9793%" y="495.50"></text></g><g><title>__memset_avx2_unaligned_erms (5,013 samples, 0.51%)</title><rect x="86.3679%" y="405" width="0.5107%" height="15" fill="rgb(251,28,31)"/><text x="86.6179%" y="415.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (5,974 samples, 0.61%)</title><rect x="86.2766%" y="501" width="0.6086%" height="15" fill="rgb(233,223,10)"/><text x="86.5266%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (5,974 samples, 0.61%)</title><rect x="86.2766%" y="485" width="0.6086%" height="15" fill="rgb(215,21,27)"/><text x="86.5266%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5,974 samples, 0.61%)</title><rect x="86.2766%" y="469" width="0.6086%" height="15" fill="rgb(232,23,21)"/><text x="86.5266%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (5,974 samples, 0.61%)</title><rect x="86.2766%" y="453" width="0.6086%" height="15" fill="rgb(244,5,23)"/><text x="86.5266%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,974 samples, 0.61%)</title><rect x="86.2766%" y="437" width="0.6086%" height="15" fill="rgb(226,81,46)"/><text x="86.5266%" y="447.50"></text></g><g><title>alloc::alloc::alloc_zeroed (5,971 samples, 0.61%)</title><rect x="86.2769%" y="421" width="0.6083%" height="15" fill="rgb(247,70,30)"/><text x="86.5269%" y="431.50"></text></g><g><title>alloc::vec::from_elem (5,976 samples, 0.61%)</title><rect x="86.2766%" y="517" width="0.6088%" height="15" fill="rgb(212,68,19)"/><text x="86.5266%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,863 samples, 0.50%)</title><rect x="86.8856%" y="405" width="0.4954%" height="15" fill="rgb(240,187,13)"/><text x="87.1356%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,863 samples, 0.50%)</title><rect x="86.8856%" y="389" width="0.4954%" height="15" fill="rgb(223,113,26)"/><text x="87.1356%" y="399.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (4,147 samples, 0.42%)</title><rect x="86.9586%" y="373" width="0.4225%" height="15" fill="rgb(206,192,2)"/><text x="87.2086%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (4,147 samples, 0.42%)</title><rect x="86.9586%" y="357" width="0.4225%" height="15" fill="rgb(241,108,4)"/><text x="87.2086%" y="367.50"></text></g><g><title>clear_page_erms (2,848 samples, 0.29%)</title><rect x="91.0437%" y="229" width="0.2902%" height="15" fill="rgb(247,173,49)"/><text x="91.2937%" y="239.50"></text></g><g><title>get_page_from_freelist (4,146 samples, 0.42%)</title><rect x="90.9583%" y="245" width="0.4224%" height="15" fill="rgb(224,114,35)"/><text x="91.2083%" y="255.50"></text></g><g><title>__alloc_pages (4,402 samples, 0.45%)</title><rect x="90.9535%" y="261" width="0.4485%" height="15" fill="rgb(245,159,27)"/><text x="91.2035%" y="271.50"></text></g><g><title>alloc_pages_vma (4,572 samples, 0.47%)</title><rect x="90.9382%" y="277" width="0.4658%" height="15" fill="rgb(245,172,44)"/><text x="91.1882%" y="287.50"></text></g><g><title>__handle_mm_fault (5,961 samples, 0.61%)</title><rect x="90.8371%" y="293" width="0.6073%" height="15" fill="rgb(236,23,11)"/><text x="91.0871%" y="303.50"></text></g><g><title>handle_mm_fault (6,326 samples, 0.64%)</title><rect x="90.8272%" y="309" width="0.6445%" height="15" fill="rgb(205,117,38)"/><text x="91.0772%" y="319.50"></text></g><g><title>do_user_addr_fault (7,229 samples, 0.74%)</title><rect x="90.7885%" y="325" width="0.7365%" height="15" fill="rgb(237,72,25)"/><text x="91.0385%" y="335.50"></text></g><g><title>exc_page_fault (7,305 samples, 0.74%)</title><rect x="90.7815%" y="341" width="0.7442%" height="15" fill="rgb(244,70,9)"/><text x="91.0315%" y="351.50"></text></g><g><title>asm_exc_page_fault (7,845 samples, 0.80%)</title><rect x="90.7411%" y="357" width="0.7993%" height="15" fill="rgb(217,125,39)"/><text x="90.9911%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (45,975 samples, 4.68%)</title><rect x="86.8856%" y="421" width="4.6840%" height="15" fill="rgb(235,36,10)"/><text x="87.1356%" y="431.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (41,112 samples, 4.19%)</title><rect x="87.3811%" y="405" width="4.1885%" height="15" fill="rgb(251,123,47)"/><text x="87.6311%" y="415.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (41,112 samples, 4.19%)</title><rect x="87.3811%" y="389" width="4.1885%" height="15" fill="rgb(221,13,13)"/><text x="87.6311%" y="399.50">&lt;allo..</text></g><g><title>core::ptr::write (41,112 samples, 4.19%)</title><rect x="87.3811%" y="373" width="4.1885%" height="15" fill="rgb(238,131,9)"/><text x="87.6311%" y="383.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (46,000 samples, 4.69%)</title><rect x="86.8856%" y="453" width="4.6865%" height="15" fill="rgb(211,50,8)"/><text x="87.1356%" y="463.50">&lt;allo..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (46,000 samples, 4.69%)</title><rect x="86.8856%" y="437" width="4.6865%" height="15" fill="rgb(245,182,24)"/><text x="87.1356%" y="447.50">core:..</text></g><g><title>clear_page_erms (2,363 samples, 0.24%)</title><rect x="92.3992%" y="165" width="0.2407%" height="15" fill="rgb(242,14,37)"/><text x="92.6492%" y="175.50"></text></g><g><title>get_page_from_freelist (4,031 samples, 0.41%)</title><rect x="92.3020%" y="181" width="0.4107%" height="15" fill="rgb(246,228,12)"/><text x="92.5520%" y="191.50"></text></g><g><title>__alloc_pages (4,329 samples, 0.44%)</title><rect x="92.2974%" y="197" width="0.4410%" height="15" fill="rgb(213,55,15)"/><text x="92.5474%" y="207.50"></text></g><g><title>alloc_pages_vma (4,688 samples, 0.48%)</title><rect x="92.2655%" y="213" width="0.4776%" height="15" fill="rgb(209,9,3)"/><text x="92.5155%" y="223.50"></text></g><g><title>__handle_mm_fault (7,174 samples, 0.73%)</title><rect x="92.0679%" y="229" width="0.7309%" height="15" fill="rgb(230,59,30)"/><text x="92.3179%" y="239.50"></text></g><g><title>handle_mm_fault (8,156 samples, 0.83%)</title><rect x="92.0141%" y="245" width="0.8309%" height="15" fill="rgb(209,121,21)"/><text x="92.2641%" y="255.50"></text></g><g><title>do_user_addr_fault (9,356 samples, 0.95%)</title><rect x="91.9300%" y="261" width="0.9532%" height="15" fill="rgb(220,109,13)"/><text x="92.1800%" y="271.50"></text></g><g><title>exc_page_fault (9,435 samples, 0.96%)</title><rect x="91.9231%" y="277" width="0.9613%" height="15" fill="rgb(232,18,1)"/><text x="92.1731%" y="287.50"></text></g><g><title>asm_exc_page_fault (10,637 samples, 1.08%)</title><rect x="91.8097%" y="293" width="1.0837%" height="15" fill="rgb(215,41,42)"/><text x="92.0597%" y="303.50"></text></g><g><title>sysmalloc (12,586 samples, 1.28%)</title><rect x="91.6429%" y="309" width="1.2823%" height="15" fill="rgb(224,123,36)"/><text x="91.8929%" y="319.50"></text></g><g><title>__GI___libc_malloc (13,298 samples, 1.35%)</title><rect x="91.5734%" y="341" width="1.3548%" height="15" fill="rgb(240,125,3)"/><text x="91.8234%" y="351.50"></text></g><g><title>_int_malloc (13,039 samples, 1.33%)</title><rect x="91.5998%" y="325" width="1.3284%" height="15" fill="rgb(205,98,50)"/><text x="91.8498%" y="335.50"></text></g><g><title>asm_exc_page_fault (1,041 samples, 0.11%)</title><rect x="92.9283%" y="325" width="0.1061%" height="15" fill="rgb(205,185,37)"/><text x="93.1783%" y="335.50"></text></g><g><title>__pthread_getaffinity_alias (1,179 samples, 0.12%)</title><rect x="92.9283%" y="341" width="0.1201%" height="15" fill="rgb(238,207,15)"/><text x="93.1783%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14,562 samples, 1.48%)</title><rect x="91.5722%" y="405" width="1.4836%" height="15" fill="rgb(213,199,42)"/><text x="91.8222%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14,562 samples, 1.48%)</title><rect x="91.5722%" y="389" width="1.4836%" height="15" fill="rgb(235,201,11)"/><text x="91.8222%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14,562 samples, 1.48%)</title><rect x="91.5722%" y="373" width="1.4836%" height="15" fill="rgb(207,46,11)"/><text x="91.8222%" y="383.50"></text></g><g><title>alloc::alloc::alloc (14,551 samples, 1.48%)</title><rect x="91.5733%" y="357" width="1.4825%" height="15" fill="rgb(241,35,35)"/><text x="91.8233%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (60,565 samples, 6.17%)</title><rect x="86.8856%" y="517" width="6.1704%" height="15" fill="rgb(243,32,47)"/><text x="87.1356%" y="527.50">core::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (60,565 samples, 6.17%)</title><rect x="86.8856%" y="501" width="6.1704%" height="15" fill="rgb(247,202,23)"/><text x="87.1356%" y="511.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (60,565 samples, 6.17%)</title><rect x="86.8856%" y="485" width="6.1704%" height="15" fill="rgb(219,102,11)"/><text x="87.1356%" y="495.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (60,565 samples, 6.17%)</title><rect x="86.8856%" y="469" width="6.1704%" height="15" fill="rgb(243,110,44)"/><text x="87.1356%" y="479.50">&lt;alloc::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (14,565 samples, 1.48%)</title><rect x="91.5722%" y="453" width="1.4839%" height="15" fill="rgb(222,74,54)"/><text x="91.8222%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14,565 samples, 1.48%)</title><rect x="91.5722%" y="437" width="1.4839%" height="15" fill="rgb(216,99,12)"/><text x="91.8222%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14,565 samples, 1.48%)</title><rect x="91.5722%" y="421" width="1.4839%" height="15" fill="rgb(226,22,26)"/><text x="91.8222%" y="431.50"></text></g><g><title>_extract_crng (2,665 samples, 0.27%)</title><rect x="93.5005%" y="373" width="0.2715%" height="15" fill="rgb(217,163,10)"/><text x="93.7505%" y="383.50"></text></g><g><title>chacha_block_generic (1,774 samples, 0.18%)</title><rect x="93.5913%" y="357" width="0.1807%" height="15" fill="rgb(213,25,53)"/><text x="93.8413%" y="367.50"></text></g><g><title>chacha_permute (1,545 samples, 0.16%)</title><rect x="93.6146%" y="341" width="0.1574%" height="15" fill="rgb(252,105,26)"/><text x="93.8646%" y="351.50"></text></g><g><title>entry_SYSCALL_64 (4,872 samples, 0.50%)</title><rect x="93.2885%" y="421" width="0.4964%" height="15" fill="rgb(220,39,43)"/><text x="93.5385%" y="431.50"></text></g><g><title>do_syscall_64 (4,717 samples, 0.48%)</title><rect x="93.3043%" y="405" width="0.4806%" height="15" fill="rgb(229,68,48)"/><text x="93.5543%" y="415.50"></text></g><g><title>urandom_read_nowarn.constprop.0 (3,685 samples, 0.38%)</title><rect x="93.4094%" y="389" width="0.3754%" height="15" fill="rgb(252,8,32)"/><text x="93.6594%" y="399.50"></text></g><g><title>getrandom::imp::getrandom_inner (5,646 samples, 0.58%)</title><rect x="93.2110%" y="501" width="0.5752%" height="15" fill="rgb(223,20,43)"/><text x="93.4610%" y="511.50"></text></g><g><title>getrandom::util_libc::sys_fill_exact (5,050 samples, 0.51%)</title><rect x="93.2718%" y="485" width="0.5145%" height="15" fill="rgb(229,81,49)"/><text x="93.5218%" y="495.50"></text></g><g><title>getrandom::imp::getrandom_inner::{{closure}} (5,032 samples, 0.51%)</title><rect x="93.2736%" y="469" width="0.5127%" height="15" fill="rgb(236,28,36)"/><text x="93.5236%" y="479.50"></text></g><g><title>getrandom::imp::getrandom (5,032 samples, 0.51%)</title><rect x="93.2736%" y="453" width="0.5127%" height="15" fill="rgb(249,185,26)"/><text x="93.5236%" y="463.50"></text></g><g><title>syscall (5,030 samples, 0.51%)</title><rect x="93.2738%" y="437" width="0.5125%" height="15" fill="rgb(249,174,33)"/><text x="93.5238%" y="447.50"></text></g><g><title>minesweeper_core::get_mines (73,971 samples, 7.54%)</title><rect x="86.2503%" y="533" width="7.5363%" height="15" fill="rgb(233,201,37)"/><text x="86.5003%" y="543.50">minesweepe..</text></g><g><title>rand_core::SeedableRng::from_entropy (5,937 samples, 0.60%)</title><rect x="93.1817%" y="517" width="0.6049%" height="15" fill="rgb(221,78,26)"/><text x="93.4317%" y="527.50"></text></g><g><title>minesweeper_core::get_grid::{{closure}} (76,166 samples, 7.76%)</title><rect x="86.1129%" y="549" width="7.7599%" height="15" fill="rgb(250,127,30)"/><text x="86.3629%" y="559.50">minesweeper..</text></g><g><title>std::panic::catch_unwind (80,025 samples, 8.15%)</title><rect x="85.7204%" y="645" width="8.1531%" height="15" fill="rgb(230,49,44)"/><text x="85.9704%" y="655.50">std::panic:..</text></g><g><title>std::panicking::try (80,025 samples, 8.15%)</title><rect x="85.7204%" y="629" width="8.1531%" height="15" fill="rgb(229,67,23)"/><text x="85.9704%" y="639.50">std::panick..</text></g><g><title>std::panicking::try::do_call (80,025 samples, 8.15%)</title><rect x="85.7204%" y="613" width="8.1531%" height="15" fill="rgb(249,83,47)"/><text x="85.9704%" y="623.50">std::panick..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (80,025 samples, 8.15%)</title><rect x="85.7204%" y="597" width="8.1531%" height="15" fill="rgb(215,43,3)"/><text x="85.9704%" y="607.50">&lt;core::pani..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (80,025 samples, 8.15%)</title><rect x="85.7204%" y="581" width="8.1531%" height="15" fill="rgb(238,154,13)"/><text x="85.9704%" y="591.50">std::thread..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (79,954 samples, 8.15%)</title><rect x="85.7276%" y="565" width="8.1458%" height="15" fill="rgb(219,56,2)"/><text x="85.9776%" y="575.50">std::sys_co..</text></g><g><title>_int_malloc (1,193 samples, 0.12%)</title><rect x="94.0704%" y="581" width="0.1215%" height="15" fill="rgb(233,0,4)"/><text x="94.3204%" y="591.50"></text></g><g><title>__GI___libc_malloc (2,834 samples, 0.29%)</title><rect x="93.9435%" y="613" width="0.2887%" height="15" fill="rgb(235,30,7)"/><text x="94.1935%" y="623.50"></text></g><g><title>tcache_init.part.0 (1,863 samples, 0.19%)</title><rect x="94.0424%" y="597" width="0.1898%" height="15" fill="rgb(250,79,13)"/><text x="94.2924%" y="607.50"></text></g><g><title>__radix_tree_lookup (1,721 samples, 0.18%)</title><rect x="94.5019%" y="517" width="0.1753%" height="15" fill="rgb(211,146,34)"/><text x="94.7519%" y="527.50"></text></g><g><title>find_task_by_vpid (2,292 samples, 0.23%)</title><rect x="94.4931%" y="533" width="0.2335%" height="15" fill="rgb(228,22,38)"/><text x="94.7431%" y="543.50"></text></g><g><title>__x64_sys_sched_getaffinity (3,194 samples, 0.33%)</title><rect x="94.4016%" y="565" width="0.3254%" height="15" fill="rgb(235,168,5)"/><text x="94.6516%" y="575.50"></text></g><g><title>sched_getaffinity (2,946 samples, 0.30%)</title><rect x="94.4269%" y="549" width="0.3001%" height="15" fill="rgb(221,155,16)"/><text x="94.6769%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (3,482 samples, 0.35%)</title><rect x="94.3939%" y="597" width="0.3548%" height="15" fill="rgb(215,215,53)"/><text x="94.6439%" y="607.50"></text></g><g><title>do_syscall_64 (3,475 samples, 0.35%)</title><rect x="94.3946%" y="581" width="0.3540%" height="15" fill="rgb(223,4,10)"/><text x="94.6446%" y="591.50"></text></g><g><title>__pthread_getaffinity_alias (3,737 samples, 0.38%)</title><rect x="94.3692%" y="613" width="0.3807%" height="15" fill="rgb(234,103,6)"/><text x="94.6192%" y="623.50"></text></g><g><title>__pthread_getattr_np (8,192 samples, 0.83%)</title><rect x="93.9294%" y="629" width="0.8346%" height="15" fill="rgb(227,97,0)"/><text x="94.1794%" y="639.50"></text></g><g><title>std::sys::unix::thread::guard::current (8,747 samples, 0.89%)</title><rect x="93.8735%" y="645" width="0.8912%" height="15" fill="rgb(234,150,53)"/><text x="94.1235%" y="655.50"></text></g><g><title>__cxa_thread_atexit_impl (1,887 samples, 0.19%)</title><rect x="94.7720%" y="565" width="0.1923%" height="15" fill="rgb(228,201,54)"/><text x="95.0220%" y="575.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (2,033 samples, 0.21%)</title><rect x="94.7672%" y="597" width="0.2071%" height="15" fill="rgb(222,22,37)"/><text x="95.0172%" y="607.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::register_dtor (1,986 samples, 0.20%)</title><rect x="94.7720%" y="581" width="0.2023%" height="15" fill="rgb(237,53,32)"/><text x="95.0220%" y="591.50"></text></g><g><title>std::sys_common::thread_info::set (2,087 samples, 0.21%)</title><rect x="94.7646%" y="645" width="0.2126%" height="15" fill="rgb(233,25,53)"/><text x="95.0146%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,062 samples, 0.21%)</title><rect x="94.7672%" y="629" width="0.2101%" height="15" fill="rgb(210,40,34)"/><text x="95.0172%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,062 samples, 0.21%)</title><rect x="94.7672%" y="613" width="0.2101%" height="15" fill="rgb(241,220,44)"/><text x="95.0172%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (92,277 samples, 9.40%)</title><rect x="85.6699%" y="693" width="9.4013%" height="15" fill="rgb(235,28,35)"/><text x="85.9199%" y="703.50">&lt;alloc::boxed..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (92,233 samples, 9.40%)</title><rect x="85.6744%" y="677" width="9.3968%" height="15" fill="rgb(210,56,17)"/><text x="85.9244%" y="687.50">core::ops::fu..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (92,120 samples, 9.39%)</title><rect x="85.6859%" y="661" width="9.3853%" height="15" fill="rgb(224,130,29)"/><text x="85.9359%" y="671.50">std::thread::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (92,791 samples, 9.45%)</title><rect x="85.6213%" y="709" width="9.4537%" height="15" fill="rgb(235,212,8)"/><text x="85.8713%" y="719.50">&lt;alloc::boxed:..</text></g><g><title>unmap_region (2,537 samples, 0.26%)</title><rect x="95.3361%" y="565" width="0.2585%" height="15" fill="rgb(223,33,50)"/><text x="95.5861%" y="575.50"></text></g><g><title>__do_munmap (4,949 samples, 0.50%)</title><rect x="95.0983%" y="581" width="0.5042%" height="15" fill="rgb(219,149,13)"/><text x="95.3483%" y="591.50"></text></g><g><title>__vm_munmap (5,879 samples, 0.60%)</title><rect x="95.0959%" y="597" width="0.5990%" height="15" fill="rgb(250,156,29)"/><text x="95.3459%" y="607.50"></text></g><g><title>__x64_sys_munmap (6,084 samples, 0.62%)</title><rect x="95.0853%" y="613" width="0.6198%" height="15" fill="rgb(216,193,19)"/><text x="95.3353%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (6,266 samples, 0.64%)</title><rect x="95.0821%" y="645" width="0.6384%" height="15" fill="rgb(216,135,14)"/><text x="95.3321%" y="655.50"></text></g><g><title>do_syscall_64 (6,256 samples, 0.64%)</title><rect x="95.0831%" y="629" width="0.6374%" height="15" fill="rgb(241,47,5)"/><text x="95.3331%" y="639.50"></text></g><g><title>__GI___munmap (6,338 samples, 0.65%)</title><rect x="95.0755%" y="661" width="0.6457%" height="15" fill="rgb(233,42,35)"/><text x="95.3255%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (7,388 samples, 0.75%)</title><rect x="95.0750%" y="709" width="0.7527%" height="15" fill="rgb(231,13,6)"/><text x="95.3250%" y="719.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (7,388 samples, 0.75%)</title><rect x="95.0750%" y="693" width="0.7527%" height="15" fill="rgb(207,181,40)"/><text x="95.3250%" y="703.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (7,388 samples, 0.75%)</title><rect x="95.0750%" y="677" width="0.7527%" height="15" fill="rgb(254,173,49)"/><text x="95.3250%" y="687.50"></text></g><g><title>__GI___sigaltstack (990 samples, 0.10%)</title><rect x="95.8405%" y="677" width="0.1009%" height="15" fill="rgb(221,1,38)"/><text x="96.0905%" y="687.50"></text></g><g><title>perf_iterate_ctx (3,962 samples, 0.40%)</title><rect x="96.1135%" y="517" width="0.4037%" height="15" fill="rgb(206,124,46)"/><text x="96.3635%" y="527.50"></text></g><g><title>perf_iterate_sb (3,986 samples, 0.41%)</title><rect x="96.1112%" y="533" width="0.4061%" height="15" fill="rgb(249,21,11)"/><text x="96.3612%" y="543.50"></text></g><g><title>perf_event_mmap (4,091 samples, 0.42%)</title><rect x="96.1024%" y="549" width="0.4168%" height="15" fill="rgb(222,201,40)"/><text x="96.3524%" y="559.50"></text></g><g><title>do_mmap (5,815 samples, 0.59%)</title><rect x="95.9806%" y="581" width="0.5924%" height="15" fill="rgb(235,61,29)"/><text x="96.2306%" y="591.50"></text></g><g><title>mmap_region (4,841 samples, 0.49%)</title><rect x="96.0798%" y="565" width="0.4932%" height="15" fill="rgb(219,207,3)"/><text x="96.3298%" y="575.50"></text></g><g><title>down_write_killable (1,508 samples, 0.15%)</title><rect x="96.5730%" y="581" width="0.1536%" height="15" fill="rgb(222,56,46)"/><text x="96.8230%" y="591.50"></text></g><g><title>rwsem_down_write_slowpath (1,415 samples, 0.14%)</title><rect x="96.5825%" y="565" width="0.1442%" height="15" fill="rgb(239,76,54)"/><text x="96.8325%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (8,082 samples, 0.82%)</title><rect x="95.9555%" y="629" width="0.8234%" height="15" fill="rgb(231,124,27)"/><text x="96.2055%" y="639.50"></text></g><g><title>do_syscall_64 (8,016 samples, 0.82%)</title><rect x="95.9622%" y="613" width="0.8167%" height="15" fill="rgb(249,195,6)"/><text x="96.2122%" y="623.50"></text></g><g><title>vm_mmap_pgoff (7,874 samples, 0.80%)</title><rect x="95.9767%" y="597" width="0.8022%" height="15" fill="rgb(237,174,47)"/><text x="96.2267%" y="607.50"></text></g><g><title>__GI___mmap64 (8,137 samples, 0.83%)</title><rect x="95.9512%" y="645" width="0.8290%" height="15" fill="rgb(206,201,31)"/><text x="96.2012%" y="655.50"></text></g><g><title>down_write_killable (1,759 samples, 0.18%)</title><rect x="96.8011%" y="565" width="0.1792%" height="15" fill="rgb(231,57,52)"/><text x="97.0511%" y="575.50"></text></g><g><title>rwsem_down_write_slowpath (1,725 samples, 0.18%)</title><rect x="96.8046%" y="549" width="0.1757%" height="15" fill="rgb(248,177,22)"/><text x="97.0546%" y="559.50"></text></g><g><title>__split_vma (1,240 samples, 0.13%)</title><rect x="97.0200%" y="549" width="0.1263%" height="15" fill="rgb(215,211,37)"/><text x="97.2700%" y="559.50"></text></g><g><title>perf_event_mmap_output (1,100 samples, 0.11%)</title><rect x="97.3053%" y="501" width="0.1121%" height="15" fill="rgb(241,128,51)"/><text x="97.5553%" y="511.50"></text></g><g><title>perf_iterate_ctx (1,800 samples, 0.18%)</title><rect x="97.2353%" y="517" width="0.1834%" height="15" fill="rgb(227,165,31)"/><text x="97.4853%" y="527.50"></text></g><g><title>perf_iterate_sb (1,834 samples, 0.19%)</title><rect x="97.2325%" y="533" width="0.1869%" height="15" fill="rgb(228,167,24)"/><text x="97.4825%" y="543.50"></text></g><g><title>perf_event_mmap (1,920 samples, 0.20%)</title><rect x="97.2249%" y="549" width="0.1956%" height="15" fill="rgb(228,143,12)"/><text x="97.4749%" y="559.50"></text></g><g><title>mprotect_fixup (4,111 samples, 0.42%)</title><rect x="97.0119%" y="565" width="0.4188%" height="15" fill="rgb(249,149,8)"/><text x="97.2619%" y="575.50"></text></g><g><title>__x64_sys_mprotect (6,509 samples, 0.66%)</title><rect x="96.7872%" y="597" width="0.6631%" height="15" fill="rgb(243,35,44)"/><text x="97.0372%" y="607.50"></text></g><g><title>do_mprotect_pkey (6,479 samples, 0.66%)</title><rect x="96.7902%" y="581" width="0.6601%" height="15" fill="rgb(246,89,9)"/><text x="97.0402%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (6,704 samples, 0.68%)</title><rect x="96.7859%" y="629" width="0.6830%" height="15" fill="rgb(233,213,13)"/><text x="97.0359%" y="639.50"></text></g><g><title>do_syscall_64 (6,698 samples, 0.68%)</title><rect x="96.7866%" y="613" width="0.6824%" height="15" fill="rgb(233,141,41)"/><text x="97.0366%" y="623.50"></text></g><g><title>__GI___mprotect (6,775 samples, 0.69%)</title><rect x="96.7802%" y="645" width="0.6902%" height="15" fill="rgb(239,167,4)"/><text x="97.0302%" y="655.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (116,686 samples, 11.89%)</title><rect x="85.6132%" y="725" width="11.8881%" height="15" fill="rgb(209,217,16)"/><text x="85.8632%" y="735.50">std::sys::unix::th..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (16,428 samples, 1.67%)</title><rect x="95.8277%" y="709" width="1.6737%" height="15" fill="rgb(219,88,35)"/><text x="96.0777%" y="719.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (16,428 samples, 1.67%)</title><rect x="95.8277%" y="693" width="1.6737%" height="15" fill="rgb(220,193,23)"/><text x="96.0777%" y="703.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (15,257 samples, 1.55%)</title><rect x="95.9470%" y="677" width="1.5544%" height="15" fill="rgb(230,90,52)"/><text x="96.1970%" y="687.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (15,257 samples, 1.55%)</title><rect x="95.9470%" y="661" width="1.5544%" height="15" fill="rgb(252,106,19)"/><text x="96.1970%" y="671.50"></text></g><g><title>start_thread (355,892 samples, 36.26%)</title><rect x="61.3290%" y="741" width="36.2588%" height="15" fill="rgb(206,74,20)"/><text x="61.5790%" y="751.50">start_thread</text></g><g><title>__GI___clone (959,694 samples, 97.77%)</title><rect x="1.0153%" y="757" width="97.7749%" height="15" fill="rgb(230,138,44)"/><text x="1.2653%" y="767.50">__GI___clone</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (11,803 samples, 1.20%)</title><rect x="97.5878%" y="741" width="1.2025%" height="15" fill="rgb(235,182,43)"/><text x="97.8378%" y="751.50"></text></g><g><title>__pthread_create_2_1 (1,336 samples, 0.14%)</title><rect x="98.8977%" y="37" width="0.1361%" height="15" fill="rgb(242,16,51)"/><text x="99.1477%" y="47.50"></text></g><g><title>std::sys::unix::thread::Thread::new (1,352 samples, 0.14%)</title><rect x="98.8977%" y="53" width="0.1377%" height="15" fill="rgb(248,9,4)"/><text x="99.1477%" y="63.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (2,391 samples, 0.24%)</title><rect x="98.7927%" y="373" width="0.2436%" height="15" fill="rgb(210,31,22)"/><text x="99.0427%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,391 samples, 0.24%)</title><rect x="98.7927%" y="357" width="0.2436%" height="15" fill="rgb(239,54,39)"/><text x="99.0427%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,391 samples, 0.24%)</title><rect x="98.7927%" y="341" width="0.2436%" height="15" fill="rgb(230,99,41)"/><text x="99.0427%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,391 samples, 0.24%)</title><rect x="98.7927%" y="325" width="0.2436%" height="15" fill="rgb(253,106,12)"/><text x="99.0427%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,391 samples, 0.24%)</title><rect x="98.7927%" y="309" width="0.2436%" height="15" fill="rgb(213,46,41)"/><text x="99.0427%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,391 samples, 0.24%)</title><rect x="98.7927%" y="293" width="0.2436%" height="15" fill="rgb(215,133,35)"/><text x="99.0427%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,391 samples, 0.24%)</title><rect x="98.7927%" y="277" width="0.2436%" height="15" fill="rgb(213,28,5)"/><text x="99.0427%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,391 samples, 0.24%)</title><rect x="98.7927%" y="261" width="0.2436%" height="15" fill="rgb(215,77,49)"/><text x="99.0427%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,391 samples, 0.24%)</title><rect x="98.7927%" y="245" width="0.2436%" height="15" fill="rgb(248,100,22)"/><text x="99.0427%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,391 samples, 0.24%)</title><rect x="98.7927%" y="229" width="0.2436%" height="15" fill="rgb(208,67,9)"/><text x="99.0427%" y="239.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (2,391 samples, 0.24%)</title><rect x="98.7927%" y="213" width="0.2436%" height="15" fill="rgb(219,133,21)"/><text x="99.0427%" y="223.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (2,391 samples, 0.24%)</title><rect x="98.7927%" y="197" width="0.2436%" height="15" fill="rgb(246,46,29)"/><text x="99.0427%" y="207.50"></text></g><g><title>main::criterion_benchmark::{{closure}} (2,391 samples, 0.24%)</title><rect x="98.7927%" y="181" width="0.2436%" height="15" fill="rgb(246,185,52)"/><text x="99.0427%" y="191.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (2,391 samples, 0.24%)</title><rect x="98.7927%" y="165" width="0.2436%" height="15" fill="rgb(252,136,11)"/><text x="99.0427%" y="175.50"></text></g><g><title>main::criterion_benchmark::{{closure}}::{{closure}} (2,318 samples, 0.24%)</title><rect x="98.8001%" y="149" width="0.2362%" height="15" fill="rgb(219,138,53)"/><text x="99.0501%" y="159.50"></text></g><g><title>minesweeper_core::get_grid (2,318 samples, 0.24%)</title><rect x="98.8001%" y="133" width="0.2362%" height="15" fill="rgb(211,51,23)"/><text x="99.0501%" y="143.50"></text></g><g><title>std::thread::spawn (1,367 samples, 0.14%)</title><rect x="98.8970%" y="117" width="0.1393%" height="15" fill="rgb(247,221,28)"/><text x="99.1470%" y="127.50"></text></g><g><title>std::thread::Builder::spawn (1,365 samples, 0.14%)</title><rect x="98.8972%" y="101" width="0.1391%" height="15" fill="rgb(251,222,45)"/><text x="99.1472%" y="111.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1,365 samples, 0.14%)</title><rect x="98.8972%" y="85" width="0.1391%" height="15" fill="rgb(217,162,53)"/><text x="99.1472%" y="95.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (1,365 samples, 0.14%)</title><rect x="98.8972%" y="69" width="0.1391%" height="15" fill="rgb(229,93,14)"/><text x="99.1472%" y="79.50"></text></g><g><title>_start (3,856 samples, 0.39%)</title><rect x="98.7906%" y="757" width="0.3929%" height="15" fill="rgb(209,67,49)"/><text x="99.0406%" y="767.50"></text></g><g><title>__libc_start_main_alias_2 (3,856 samples, 0.39%)</title><rect x="98.7906%" y="741" width="0.3929%" height="15" fill="rgb(213,87,29)"/><text x="99.0406%" y="751.50"></text></g><g><title>__libc_start_call_main (3,856 samples, 0.39%)</title><rect x="98.7906%" y="725" width="0.3929%" height="15" fill="rgb(205,151,52)"/><text x="99.0406%" y="735.50"></text></g><g><title>main (3,856 samples, 0.39%)</title><rect x="98.7906%" y="709" width="0.3929%" height="15" fill="rgb(253,215,39)"/><text x="99.0406%" y="719.50"></text></g><g><title>std::rt::lang_start_internal (3,856 samples, 0.39%)</title><rect x="98.7906%" y="693" width="0.3929%" height="15" fill="rgb(221,220,41)"/><text x="99.0406%" y="703.50"></text></g><g><title>std::panic::catch_unwind (3,856 samples, 0.39%)</title><rect x="98.7906%" y="677" width="0.3929%" height="15" fill="rgb(218,133,21)"/><text x="99.0406%" y="687.50"></text></g><g><title>std::panicking::try (3,856 samples, 0.39%)</title><rect x="98.7906%" y="661" width="0.3929%" height="15" fill="rgb(221,193,43)"/><text x="99.0406%" y="671.50"></text></g><g><title>std::panicking::try::do_call (3,856 samples, 0.39%)</title><rect x="98.7906%" y="645" width="0.3929%" height="15" fill="rgb(240,128,52)"/><text x="99.0406%" y="655.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (3,856 samples, 0.39%)</title><rect x="98.7906%" y="629" width="0.3929%" height="15" fill="rgb(253,114,12)"/><text x="99.0406%" y="639.50"></text></g><g><title>std::panic::catch_unwind (3,856 samples, 0.39%)</title><rect x="98.7906%" y="613" width="0.3929%" height="15" fill="rgb(215,223,47)"/><text x="99.0406%" y="623.50"></text></g><g><title>std::panicking::try (3,856 samples, 0.39%)</title><rect x="98.7906%" y="597" width="0.3929%" height="15" fill="rgb(248,225,23)"/><text x="99.0406%" y="607.50"></text></g><g><title>std::panicking::try::do_call (3,856 samples, 0.39%)</title><rect x="98.7906%" y="581" width="0.3929%" height="15" fill="rgb(250,108,0)"/><text x="99.0406%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,856 samples, 0.39%)</title><rect x="98.7906%" y="565" width="0.3929%" height="15" fill="rgb(228,208,7)"/><text x="99.0406%" y="575.50"></text></g><g><title>std::rt::lang_start::{{closure}} (3,856 samples, 0.39%)</title><rect x="98.7906%" y="549" width="0.3929%" height="15" fill="rgb(244,45,10)"/><text x="99.0406%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,856 samples, 0.39%)</title><rect x="98.7906%" y="533" width="0.3929%" height="15" fill="rgb(207,125,25)"/><text x="99.0406%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3,856 samples, 0.39%)</title><rect x="98.7906%" y="517" width="0.3929%" height="15" fill="rgb(210,195,18)"/><text x="99.0406%" y="527.50"></text></g><g><title>main::main (3,856 samples, 0.39%)</title><rect x="98.7906%" y="501" width="0.3929%" height="15" fill="rgb(249,80,12)"/><text x="99.0406%" y="511.50"></text></g><g><title>main::benches (3,855 samples, 0.39%)</title><rect x="98.7907%" y="485" width="0.3928%" height="15" fill="rgb(221,65,9)"/><text x="99.0407%" y="495.50"></text></g><g><title>main::criterion_benchmark (3,855 samples, 0.39%)</title><rect x="98.7907%" y="469" width="0.3928%" height="15" fill="rgb(235,49,36)"/><text x="99.0407%" y="479.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (3,855 samples, 0.39%)</title><rect x="98.7907%" y="453" width="0.3928%" height="15" fill="rgb(225,32,20)"/><text x="99.0407%" y="463.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (3,855 samples, 0.39%)</title><rect x="98.7907%" y="437" width="0.3928%" height="15" fill="rgb(215,141,46)"/><text x="99.0407%" y="447.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (3,855 samples, 0.39%)</title><rect x="98.7907%" y="421" width="0.3928%" height="15" fill="rgb(250,160,47)"/><text x="99.0407%" y="431.50"></text></g><g><title>criterion::analysis::common (3,855 samples, 0.39%)</title><rect x="98.7907%" y="405" width="0.3928%" height="15" fill="rgb(216,222,40)"/><text x="99.0407%" y="415.50"></text></g><g><title>criterion::routine::Routine::sample (3,835 samples, 0.39%)</title><rect x="98.7927%" y="389" width="0.3907%" height="15" fill="rgb(234,217,39)"/><text x="99.0427%" y="399.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (1,444 samples, 0.15%)</title><rect x="99.0363%" y="373" width="0.1471%" height="15" fill="rgb(207,178,40)"/><text x="99.2863%" y="383.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (1,444 samples, 0.15%)</title><rect x="99.0363%" y="357" width="0.1471%" height="15" fill="rgb(221,136,13)"/><text x="99.2863%" y="367.50"></text></g><g><title>main::criterion_benchmark::{{closure}} (1,444 samples, 0.15%)</title><rect x="99.0363%" y="341" width="0.1471%" height="15" fill="rgb(249,199,10)"/><text x="99.2863%" y="351.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (1,444 samples, 0.15%)</title><rect x="99.0363%" y="325" width="0.1471%" height="15" fill="rgb(249,222,13)"/><text x="99.2863%" y="335.50"></text></g><g><title>main::criterion_benchmark::{{closure}}::{{closure}} (1,388 samples, 0.14%)</title><rect x="99.0420%" y="309" width="0.1414%" height="15" fill="rgb(244,185,38)"/><text x="99.2920%" y="319.50"></text></g><g><title>minesweeper_core::get_grid (1,388 samples, 0.14%)</title><rect x="99.0420%" y="293" width="0.1414%" height="15" fill="rgb(236,202,9)"/><text x="99.2920%" y="303.50"></text></g><g><title>delay_halt (2,619 samples, 0.27%)</title><rect x="99.4819%" y="629" width="0.2668%" height="15" fill="rgb(250,229,37)"/><text x="99.7319%" y="639.50"></text></g><g><title>delay_halt_mwaitx (2,472 samples, 0.25%)</title><rect x="99.4969%" y="613" width="0.2519%" height="15" fill="rgb(206,174,23)"/><text x="99.7469%" y="623.50"></text></g><g><title>amd_pmu_wait_on_overflow (3,164 samples, 0.32%)</title><rect x="99.4559%" y="645" width="0.3224%" height="15" fill="rgb(211,33,43)"/><text x="99.7059%" y="655.50"></text></g><g><title>amd_pmu_disable_all (4,378 samples, 0.45%)</title><rect x="99.4537%" y="661" width="0.4460%" height="15" fill="rgb(245,58,50)"/><text x="99.7037%" y="671.50"></text></g><g><title>x86_pmu_disable_all (1,193 samples, 0.12%)</title><rect x="99.7782%" y="645" width="0.1215%" height="15" fill="rgb(244,68,36)"/><text x="100.0282%" y="655.50"></text></g><g><title>ctx_sched_out (4,524 samples, 0.46%)</title><rect x="99.4488%" y="677" width="0.4609%" height="15" fill="rgb(232,229,15)"/><text x="99.6988%" y="687.50"></text></g><g><title>perf_event_exit_task (4,762 samples, 0.49%)</title><rect x="99.4378%" y="693" width="0.4852%" height="15" fill="rgb(254,30,23)"/><text x="99.6878%" y="703.50"></text></g><g><title>[vmlinux] (5,703 samples, 0.58%)</title><rect x="99.3798%" y="725" width="0.5810%" height="15" fill="rgb(235,160,14)"/><text x="99.6298%" y="735.50"></text></g><g><title>do_exit (5,703 samples, 0.58%)</title><rect x="99.3798%" y="709" width="0.5810%" height="15" fill="rgb(212,155,44)"/><text x="99.6298%" y="719.50"></text></g><g><title>entry_SYSCALL_64 (7,623 samples, 0.78%)</title><rect x="99.1844%" y="757" width="0.7766%" height="15" fill="rgb(226,2,50)"/><text x="99.4344%" y="767.50"></text></g><g><title>do_syscall_64 (5,705 samples, 0.58%)</title><rect x="99.3798%" y="741" width="0.5812%" height="15" fill="rgb(234,177,6)"/><text x="99.6298%" y="751.50"></text></g><g><title>main-e54c20ddfa (981,165 samples, 99.96%)</title><rect x="0.0371%" y="773" width="99.9624%" height="15" fill="rgb(217,24,9)"/><text x="0.2871%" y="783.50">main-e54c20ddfa</text></g><g><title>all (981,534 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(220,13,46)"/><text x="0.2500%" y="799.50"></text></g></svg></svg>