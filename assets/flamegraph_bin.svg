<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="821.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="821.00"> </text><svg id="frames" x="10" width="1180"><g><title>alloc_vmap_area (1,117 samples, 0.10%)</title><rect x="0.0708%" y="613" width="0.1038%" height="15" fill="rgb(227,0,7)"/><text x="0.3208%" y="623.50"></text></g><g><title>__get_vm_area_node.constprop.0 (1,137 samples, 0.11%)</title><rect x="0.0698%" y="629" width="0.1057%" height="15" fill="rgb(217,0,24)"/><text x="0.3198%" y="639.50"></text></g><g><title>__vmalloc_node_range (1,452 samples, 0.13%)</title><rect x="0.0428%" y="645" width="0.1349%" height="15" fill="rgb(221,193,54)"/><text x="0.2928%" y="655.50"></text></g><g><title>perf_try_init_event (1,228 samples, 0.11%)</title><rect x="0.4535%" y="581" width="0.1141%" height="15" fill="rgb(248,212,6)"/><text x="0.7035%" y="591.50"></text></g><g><title>x86_pmu_event_init (1,209 samples, 0.11%)</title><rect x="0.4552%" y="565" width="0.1124%" height="15" fill="rgb(208,68,35)"/><text x="0.7052%" y="575.50"></text></g><g><title>perf_event_alloc (2,446 samples, 0.23%)</title><rect x="0.3414%" y="597" width="0.2273%" height="15" fill="rgb(232,128,0)"/><text x="0.5914%" y="607.50"></text></g><g><title>inherit_task_group.isra.0 (3,454 samples, 0.32%)</title><rect x="0.2493%" y="629" width="0.3210%" height="15" fill="rgb(207,160,47)"/><text x="0.4993%" y="639.50"></text></g><g><title>inherit_event.constprop.0 (3,412 samples, 0.32%)</title><rect x="0.2532%" y="613" width="0.3171%" height="15" fill="rgb(228,23,34)"/><text x="0.5032%" y="623.50"></text></g><g><title>perf_event_init_task (3,514 samples, 0.33%)</title><rect x="0.2464%" y="645" width="0.3266%" height="15" fill="rgb(218,30,26)"/><text x="0.4964%" y="655.50"></text></g><g><title>copy_process (5,891 samples, 0.55%)</title><rect x="0.0334%" y="661" width="0.5475%" height="15" fill="rgb(220,122,19)"/><text x="0.2834%" y="671.50"></text></g><g><title>__do_sys_clone (6,436 samples, 0.60%)</title><rect x="0.0323%" y="693" width="0.5982%" height="15" fill="rgb(250,228,42)"/><text x="0.2823%" y="703.50"></text></g><g><title>kernel_clone (6,432 samples, 0.60%)</title><rect x="0.0326%" y="677" width="0.5978%" height="15" fill="rgb(240,193,28)"/><text x="0.2826%" y="687.50"></text></g><g><title>entry_SYSCALL_64 (6,449 samples, 0.60%)</title><rect x="0.0320%" y="725" width="0.5994%" height="15" fill="rgb(216,20,37)"/><text x="0.2820%" y="735.50"></text></g><g><title>do_syscall_64 (6,447 samples, 0.60%)</title><rect x="0.0322%" y="709" width="0.5992%" height="15" fill="rgb(206,188,39)"/><text x="0.2822%" y="719.50"></text></g><g><title>__GI___clone (6,476 samples, 0.60%)</title><rect x="0.0296%" y="741" width="0.6019%" height="15" fill="rgb(217,207,13)"/><text x="0.2796%" y="751.50"></text></g><g><title>[unknown] (9,491 samples, 0.88%)</title><rect x="0.0277%" y="757" width="0.8821%" height="15" fill="rgb(231,73,38)"/><text x="0.2777%" y="767.50"></text></g><g><title>entry_SYSCALL_64 (8,801 samples, 0.82%)</title><rect x="5.6397%" y="741" width="0.8180%" height="15" fill="rgb(225,20,46)"/><text x="5.8897%" y="751.50"></text></g><g><title>_raw_spin_lock_irq (6,445 samples, 0.60%)</title><rect x="6.5061%" y="709" width="0.5990%" height="15" fill="rgb(210,31,41)"/><text x="6.7561%" y="719.50"></text></g><g><title>native_queued_spin_lock_slowpath (5,933 samples, 0.55%)</title><rect x="6.5537%" y="693" width="0.5514%" height="15" fill="rgb(221,200,47)"/><text x="6.8037%" y="703.50"></text></g><g><title>calculate_sigpending (7,111 samples, 0.66%)</title><rect x="6.4773%" y="725" width="0.6609%" height="15" fill="rgb(226,26,5)"/><text x="6.7273%" y="735.50"></text></g><g><title>enqueue_task_fair (1,535 samples, 0.14%)</title><rect x="7.2888%" y="597" width="0.1427%" height="15" fill="rgb(249,33,26)"/><text x="7.5388%" y="607.50"></text></g><g><title>ttwu_do_activate (1,989 samples, 0.18%)</title><rect x="7.2870%" y="629" width="0.1849%" height="15" fill="rgb(235,183,28)"/><text x="7.5370%" y="639.50"></text></g><g><title>enqueue_task (1,984 samples, 0.18%)</title><rect x="7.2875%" y="613" width="0.1844%" height="15" fill="rgb(221,5,38)"/><text x="7.5375%" y="623.50"></text></g><g><title>__sysvec_call_function_single (2,118 samples, 0.20%)</title><rect x="7.2770%" y="661" width="0.1968%" height="15" fill="rgb(247,18,42)"/><text x="7.5270%" y="671.50"></text></g><g><title>sched_ttwu_pending (2,062 samples, 0.19%)</title><rect x="7.2822%" y="645" width="0.1916%" height="15" fill="rgb(241,131,45)"/><text x="7.5322%" y="655.50"></text></g><g><title>asm_sysvec_call_function_single (2,238 samples, 0.21%)</title><rect x="7.2670%" y="693" width="0.2080%" height="15" fill="rgb(249,31,29)"/><text x="7.5170%" y="703.50"></text></g><g><title>sysvec_call_function_single (2,155 samples, 0.20%)</title><rect x="7.2747%" y="677" width="0.2003%" height="15" fill="rgb(225,111,53)"/><text x="7.5247%" y="687.50"></text></g><g><title>put_task_stack (2,229 samples, 0.21%)</title><rect x="7.4760%" y="693" width="0.2072%" height="15" fill="rgb(238,160,17)"/><text x="7.7260%" y="703.50"></text></g><g><title>finish_task_switch.isra.0 (5,866 samples, 0.55%)</title><rect x="7.1478%" y="709" width="0.5452%" height="15" fill="rgb(214,148,48)"/><text x="7.3978%" y="719.50"></text></g><g><title>schedule_tail (6,374 samples, 0.59%)</title><rect x="7.1382%" y="725" width="0.5924%" height="15" fill="rgb(232,36,49)"/><text x="7.3882%" y="735.50"></text></g><g><title>mem_cgroup_handle_over_high (2,462 samples, 0.23%)</title><rect x="8.6636%" y="693" width="0.2288%" height="15" fill="rgb(209,103,24)"/><text x="8.9136%" y="703.50"></text></g><g><title>exit_to_user_mode_prepare (580,771 samples, 53.98%)</title><rect x="7.7573%" y="709" width="53.9771%" height="15" fill="rgb(229,88,8)"/><text x="8.0073%" y="719.50">exit_to_user_mode_prepare</text></g><g><title>switch_fpu_return (568,557 samples, 52.84%)</title><rect x="8.8924%" y="693" width="52.8419%" height="15" fill="rgb(213,181,19)"/><text x="9.1424%" y="703.50">switch_fpu_return</text></g><g><title>restore_fpregs_from_fpstate (552,613 samples, 51.36%)</title><rect x="10.3743%" y="677" width="51.3600%" height="15" fill="rgb(254,191,54)"/><text x="10.6243%" y="687.50">restore_fpregs_from_fpstate</text></g><g><title>ret_from_fork (600,790 samples, 55.84%)</title><rect x="6.4668%" y="741" width="55.8376%" height="15" fill="rgb(241,83,37)"/><text x="6.7168%" y="751.50">ret_from_fork</text></g><g><title>syscall_exit_to_user_mode (587,192 samples, 54.57%)</title><rect x="7.7306%" y="725" width="54.5738%" height="15" fill="rgb(233,36,39)"/><text x="7.9806%" y="735.50">syscall_exit_to_user_mode</text></g><g><title>syscall_exit_work (6,134 samples, 0.57%)</title><rect x="61.7343%" y="709" width="0.5701%" height="15" fill="rgb(226,3,54)"/><text x="61.9843%" y="719.50"></text></g><g><title>audit_reset_context.part.0.constprop.0 (5,281 samples, 0.49%)</title><rect x="61.8136%" y="693" width="0.4908%" height="15" fill="rgb(245,192,40)"/><text x="62.0636%" y="703.50"></text></g><g><title>unroll_tree_refs (2,027 samples, 0.19%)</title><rect x="62.1160%" y="677" width="0.1884%" height="15" fill="rgb(238,167,29)"/><text x="62.3660%" y="687.50"></text></g><g><title>__GI___ctype_init (15,713 samples, 1.46%)</title><rect x="67.6359%" y="725" width="1.4604%" height="15" fill="rgb(232,182,51)"/><text x="67.8859%" y="735.50"></text></g><g><title>find_vma_prev (6,600 samples, 0.61%)</title><rect x="69.1987%" y="645" width="0.6134%" height="15" fill="rgb(231,60,39)"/><text x="69.4487%" y="655.50"></text></g><g><title>unmap_page_range (5,362 samples, 0.50%)</title><rect x="69.9667%" y="629" width="0.4983%" height="15" fill="rgb(208,69,12)"/><text x="70.2167%" y="639.50"></text></g><g><title>__x64_sys_madvise (14,583 samples, 1.36%)</title><rect x="69.1440%" y="677" width="1.3553%" height="15" fill="rgb(235,93,37)"/><text x="69.3940%" y="687.50"></text></g><g><title>do_madvise (14,410 samples, 1.34%)</title><rect x="69.1601%" y="661" width="1.3393%" height="15" fill="rgb(213,116,39)"/><text x="69.4101%" y="671.50"></text></g><g><title>zap_page_range (6,585 samples, 0.61%)</title><rect x="69.8873%" y="645" width="0.6120%" height="15" fill="rgb(222,207,29)"/><text x="70.1373%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (14,995 samples, 1.39%)</title><rect x="69.1256%" y="709" width="1.3936%" height="15" fill="rgb(206,96,30)"/><text x="69.3756%" y="719.50"></text></g><g><title>do_syscall_64 (14,865 samples, 1.38%)</title><rect x="69.1377%" y="693" width="1.3816%" height="15" fill="rgb(218,138,4)"/><text x="69.3877%" y="703.50"></text></g><g><title>__GI_madvise (15,060 samples, 1.40%)</title><rect x="69.1208%" y="725" width="1.3997%" height="15" fill="rgb(250,191,14)"/><text x="69.3708%" y="735.50"></text></g><g><title>__malloc_arena_thread_freeres (1,626 samples, 0.15%)</title><rect x="70.5610%" y="725" width="0.1511%" height="15" fill="rgb(239,60,40)"/><text x="70.8110%" y="735.50"></text></g><g><title>__free (1,243 samples, 0.12%)</title><rect x="70.5966%" y="709" width="0.1155%" height="15" fill="rgb(206,27,48)"/><text x="70.8466%" y="719.50"></text></g><g><title>_int_free (1,093 samples, 0.10%)</title><rect x="70.6105%" y="693" width="0.1016%" height="15" fill="rgb(225,35,8)"/><text x="70.8605%" y="703.50"></text></g><g><title>do_futex (1,802 samples, 0.17%)</title><rect x="72.4819%" y="645" width="0.1675%" height="15" fill="rgb(250,213,24)"/><text x="72.7319%" y="655.50"></text></g><g><title>futex_wake (1,793 samples, 0.17%)</title><rect x="72.4827%" y="629" width="0.1666%" height="15" fill="rgb(247,123,22)"/><text x="72.7327%" y="639.50"></text></g><g><title>mm_release (2,983 samples, 0.28%)</title><rect x="72.4234%" y="661" width="0.2772%" height="15" fill="rgb(231,138,38)"/><text x="72.6734%" y="671.50"></text></g><g><title>[vmlinux] (6,747 samples, 0.63%)</title><rect x="72.1725%" y="693" width="0.6271%" height="15" fill="rgb(231,145,46)"/><text x="72.4225%" y="703.50"></text></g><g><title>do_exit (6,747 samples, 0.63%)</title><rect x="72.1725%" y="677" width="0.6271%" height="15" fill="rgb(251,118,11)"/><text x="72.4225%" y="687.50"></text></g><g><title>__x64_sys_rseq (19,054 samples, 1.77%)</title><rect x="72.8093%" y="693" width="1.7709%" height="15" fill="rgb(217,147,25)"/><text x="73.0593%" y="703.50">_..</text></g><g><title>__get_user_8 (41,061 samples, 3.82%)</title><rect x="79.2977%" y="645" width="3.8162%" height="15" fill="rgb(247,81,37)"/><text x="79.5477%" y="655.50">__ge..</text></g><g><title>__put_user_nocheck_8 (14,532 samples, 1.35%)</title><rect x="83.1470%" y="645" width="1.3506%" height="15" fill="rgb(209,12,38)"/><text x="83.3970%" y="655.50"></text></g><g><title>__rseq_handle_notify_resume (80,854 samples, 7.51%)</title><rect x="76.9839%" y="661" width="7.5146%" height="15" fill="rgb(227,1,9)"/><text x="77.2339%" y="671.50">__rseq_han..</text></g><g><title>blkcg_maybe_throttle_current (2,294 samples, 0.21%)</title><rect x="84.4988%" y="661" width="0.2132%" height="15" fill="rgb(248,47,43)"/><text x="84.7488%" y="671.50"></text></g><g><title>mem_cgroup_handle_over_high (3,040 samples, 0.28%)</title><rect x="84.7120%" y="661" width="0.2825%" height="15" fill="rgb(221,10,30)"/><text x="84.9620%" y="671.50"></text></g><g><title>exit_to_user_mode_prepare (105,662 samples, 9.82%)</title><rect x="75.1749%" y="677" width="9.8203%" height="15" fill="rgb(210,229,1)"/><text x="75.4249%" y="687.50">exit_to_user_m..</text></g><g><title>syscall_exit_to_user_mode (117,863 samples, 10.95%)</title><rect x="74.8487%" y="693" width="10.9542%" height="15" fill="rgb(222,148,37)"/><text x="75.0987%" y="703.50">syscall_exit_to_..</text></g><g><title>syscall_exit_work (8,691 samples, 0.81%)</title><rect x="84.9952%" y="677" width="0.8077%" height="15" fill="rgb(234,67,33)"/><text x="85.2452%" y="687.50"></text></g><g><title>__audit_syscall_exit (5,652 samples, 0.53%)</title><rect x="85.2776%" y="661" width="0.5253%" height="15" fill="rgb(247,98,35)"/><text x="85.5276%" y="671.50"></text></g><g><title>__audit_syscall_entry (3,017 samples, 0.28%)</title><rect x="85.9784%" y="677" width="0.2804%" height="15" fill="rgb(247,138,52)"/><text x="86.2284%" y="687.50"></text></g><g><title>entry_SYSCALL_64 (168,426 samples, 15.65%)</title><rect x="70.7164%" y="725" width="15.6536%" height="15" fill="rgb(213,79,30)"/><text x="70.9664%" y="735.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (161,253 samples, 14.99%)</title><rect x="71.3831%" y="709" width="14.9869%" height="15" fill="rgb(246,177,23)"/><text x="71.6331%" y="719.50">do_syscall_64</text></g><g><title>syscall_trace_enter.constprop.0 (6,102 samples, 0.57%)</title><rect x="85.8029%" y="693" width="0.5671%" height="15" fill="rgb(230,62,27)"/><text x="86.0529%" y="703.50"></text></g><g><title>ktime_get_coarse_real_ts64 (1,195 samples, 0.11%)</title><rect x="86.2590%" y="677" width="0.1111%" height="15" fill="rgb(216,154,8)"/><text x="86.5090%" y="687.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (2,532 samples, 0.24%)</title><rect x="86.5022%" y="309" width="0.2353%" height="15" fill="rgb(244,35,45)"/><text x="86.7522%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,532 samples, 0.24%)</title><rect x="86.5022%" y="293" width="0.2353%" height="15" fill="rgb(251,115,12)"/><text x="86.7522%" y="303.50"></text></g><g><title>rayon_core::join::join_context (2,431 samples, 0.23%)</title><rect x="86.5116%" y="277" width="0.2259%" height="15" fill="rgb(240,54,50)"/><text x="86.7616%" y="287.50"></text></g><g><title>rayon_core::registry::in_worker (2,431 samples, 0.23%)</title><rect x="86.5116%" y="261" width="0.2259%" height="15" fill="rgb(233,84,52)"/><text x="86.7616%" y="271.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (2,431 samples, 0.23%)</title><rect x="86.5116%" y="245" width="0.2259%" height="15" fill="rgb(207,117,47)"/><text x="86.7616%" y="255.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (1,528 samples, 0.14%)</title><rect x="86.5955%" y="229" width="0.1420%" height="15" fill="rgb(249,43,39)"/><text x="86.8455%" y="239.50"></text></g><g><title>std::panic::catch_unwind (1,528 samples, 0.14%)</title><rect x="86.5955%" y="213" width="0.1420%" height="15" fill="rgb(209,38,44)"/><text x="86.8455%" y="223.50"></text></g><g><title>std::panicking::try (1,528 samples, 0.14%)</title><rect x="86.5955%" y="197" width="0.1420%" height="15" fill="rgb(236,212,23)"/><text x="86.8455%" y="207.50"></text></g><g><title>std::panicking::try::do_call (1,528 samples, 0.14%)</title><rect x="86.5955%" y="181" width="0.1420%" height="15" fill="rgb(242,79,21)"/><text x="86.8455%" y="191.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,528 samples, 0.14%)</title><rect x="86.5955%" y="165" width="0.1420%" height="15" fill="rgb(211,96,35)"/><text x="86.8455%" y="175.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (1,528 samples, 0.14%)</title><rect x="86.5955%" y="149" width="0.1420%" height="15" fill="rgb(253,215,40)"/><text x="86.8455%" y="159.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (1,528 samples, 0.14%)</title><rect x="86.5955%" y="133" width="0.1420%" height="15" fill="rgb(211,81,21)"/><text x="86.8455%" y="143.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (1,528 samples, 0.14%)</title><rect x="86.5955%" y="117" width="0.1420%" height="15" fill="rgb(208,190,38)"/><text x="86.8455%" y="127.50"></text></g><g><title>rayon_core::join::join_context (1,422 samples, 0.13%)</title><rect x="86.6053%" y="101" width="0.1322%" height="15" fill="rgb(235,213,38)"/><text x="86.8553%" y="111.50"></text></g><g><title>rayon_core::registry::in_worker (1,422 samples, 0.13%)</title><rect x="86.6053%" y="85" width="0.1322%" height="15" fill="rgb(237,122,38)"/><text x="86.8553%" y="95.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (1,422 samples, 0.13%)</title><rect x="86.6053%" y="69" width="0.1322%" height="15" fill="rgb(244,218,35)"/><text x="86.8553%" y="79.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (2,553 samples, 0.24%)</title><rect x="86.5022%" y="325" width="0.2373%" height="15" fill="rgb(240,68,47)"/><text x="86.7522%" y="335.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (2,562 samples, 0.24%)</title><rect x="86.5021%" y="469" width="0.2381%" height="15" fill="rgb(210,16,53)"/><text x="86.7521%" y="479.50"></text></g><g><title>rayon_core::job::JobRef::execute (2,562 samples, 0.24%)</title><rect x="86.5021%" y="453" width="0.2381%" height="15" fill="rgb(235,124,12)"/><text x="86.7521%" y="463.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (2,562 samples, 0.24%)</title><rect x="86.5021%" y="437" width="0.2381%" height="15" fill="rgb(224,169,11)"/><text x="86.7521%" y="447.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (2,561 samples, 0.24%)</title><rect x="86.5022%" y="421" width="0.2380%" height="15" fill="rgb(250,166,2)"/><text x="86.7522%" y="431.50"></text></g><g><title>std::panic::catch_unwind (2,561 samples, 0.24%)</title><rect x="86.5022%" y="405" width="0.2380%" height="15" fill="rgb(242,216,29)"/><text x="86.7522%" y="415.50"></text></g><g><title>std::panicking::try (2,561 samples, 0.24%)</title><rect x="86.5022%" y="389" width="0.2380%" height="15" fill="rgb(230,116,27)"/><text x="86.7522%" y="399.50"></text></g><g><title>std::panicking::try::do_call (2,561 samples, 0.24%)</title><rect x="86.5022%" y="373" width="0.2380%" height="15" fill="rgb(228,99,48)"/><text x="86.7522%" y="383.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,561 samples, 0.24%)</title><rect x="86.5022%" y="357" width="0.2380%" height="15" fill="rgb(253,11,6)"/><text x="86.7522%" y="367.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (2,561 samples, 0.24%)</title><rect x="86.5022%" y="341" width="0.2380%" height="15" fill="rgb(247,143,39)"/><text x="86.7522%" y="351.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (3,901 samples, 0.36%)</title><rect x="86.4903%" y="501" width="0.3626%" height="15" fill="rgb(236,97,10)"/><text x="86.7403%" y="511.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (3,901 samples, 0.36%)</title><rect x="86.4903%" y="485" width="0.3626%" height="15" fill="rgb(233,208,19)"/><text x="86.7403%" y="495.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (3,907 samples, 0.36%)</title><rect x="86.4898%" y="549" width="0.3631%" height="15" fill="rgb(216,164,2)"/><text x="86.7398%" y="559.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (3,907 samples, 0.36%)</title><rect x="86.4898%" y="533" width="0.3631%" height="15" fill="rgb(220,129,5)"/><text x="86.7398%" y="543.50"></text></g><g><title>rayon_core::registry::main_loop (3,906 samples, 0.36%)</title><rect x="86.4899%" y="517" width="0.3630%" height="15" fill="rgb(242,17,10)"/><text x="86.7399%" y="527.50"></text></g><g><title>__calloc (1,372 samples, 0.13%)</title><rect x="87.0392%" y="405" width="0.1275%" height="15" fill="rgb(242,107,0)"/><text x="87.2892%" y="415.50"></text></g><g><title>_int_malloc (1,170 samples, 0.11%)</title><rect x="87.0580%" y="389" width="0.1087%" height="15" fill="rgb(251,28,31)"/><text x="87.3080%" y="399.50"></text></g><g><title>__memset_avx2_unaligned_erms (5,570 samples, 0.52%)</title><rect x="87.1667%" y="405" width="0.5177%" height="15" fill="rgb(233,223,10)"/><text x="87.4167%" y="415.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (7,033 samples, 0.65%)</title><rect x="87.0383%" y="501" width="0.6536%" height="15" fill="rgb(215,21,27)"/><text x="87.2883%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (7,033 samples, 0.65%)</title><rect x="87.0383%" y="485" width="0.6536%" height="15" fill="rgb(232,23,21)"/><text x="87.2883%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7,033 samples, 0.65%)</title><rect x="87.0383%" y="469" width="0.6536%" height="15" fill="rgb(244,5,23)"/><text x="87.2883%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (7,033 samples, 0.65%)</title><rect x="87.0383%" y="453" width="0.6536%" height="15" fill="rgb(226,81,46)"/><text x="87.2883%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,033 samples, 0.65%)</title><rect x="87.0383%" y="437" width="0.6536%" height="15" fill="rgb(247,70,30)"/><text x="87.2883%" y="447.50"></text></g><g><title>alloc::alloc::alloc_zeroed (7,030 samples, 0.65%)</title><rect x="87.0385%" y="421" width="0.6534%" height="15" fill="rgb(212,68,19)"/><text x="87.2885%" y="431.50"></text></g><g><title>alloc::vec::from_elem (7,036 samples, 0.65%)</title><rect x="87.0383%" y="517" width="0.6539%" height="15" fill="rgb(240,187,13)"/><text x="87.2883%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6,023 samples, 0.56%)</title><rect x="87.6922%" y="405" width="0.5598%" height="15" fill="rgb(223,113,26)"/><text x="87.9422%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6,023 samples, 0.56%)</title><rect x="87.6922%" y="389" width="0.5598%" height="15" fill="rgb(206,192,2)"/><text x="87.9422%" y="399.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (4,804 samples, 0.45%)</title><rect x="87.8055%" y="373" width="0.4465%" height="15" fill="rgb(241,108,4)"/><text x="88.0555%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (4,804 samples, 0.45%)</title><rect x="87.8055%" y="357" width="0.4465%" height="15" fill="rgb(247,173,49)"/><text x="88.0555%" y="367.50"></text></g><g><title>clear_page_erms (2,358 samples, 0.22%)</title><rect x="92.0046%" y="229" width="0.2192%" height="15" fill="rgb(224,114,35)"/><text x="92.2546%" y="239.50"></text></g><g><title>get_page_from_freelist (3,304 samples, 0.31%)</title><rect x="91.9467%" y="245" width="0.3071%" height="15" fill="rgb(245,159,27)"/><text x="92.1967%" y="255.50"></text></g><g><title>__alloc_pages (3,545 samples, 0.33%)</title><rect x="91.9411%" y="261" width="0.3295%" height="15" fill="rgb(245,172,44)"/><text x="92.1911%" y="271.50"></text></g><g><title>alloc_pages_vma (3,652 samples, 0.34%)</title><rect x="91.9328%" y="277" width="0.3394%" height="15" fill="rgb(236,23,11)"/><text x="92.1828%" y="287.50"></text></g><g><title>__handle_mm_fault (4,723 samples, 0.44%)</title><rect x="91.8627%" y="293" width="0.4390%" height="15" fill="rgb(205,117,38)"/><text x="92.1127%" y="303.50"></text></g><g><title>handle_mm_fault (5,028 samples, 0.47%)</title><rect x="91.8559%" y="309" width="0.4673%" height="15" fill="rgb(237,72,25)"/><text x="92.1059%" y="319.50"></text></g><g><title>do_user_addr_fault (5,582 samples, 0.52%)</title><rect x="91.8318%" y="325" width="0.5188%" height="15" fill="rgb(244,70,9)"/><text x="92.0818%" y="335.50"></text></g><g><title>exc_page_fault (5,653 samples, 0.53%)</title><rect x="91.8260%" y="341" width="0.5254%" height="15" fill="rgb(217,125,39)"/><text x="92.0760%" y="351.50"></text></g><g><title>asm_exc_page_fault (6,115 samples, 0.57%)</title><rect x="91.7945%" y="357" width="0.5683%" height="15" fill="rgb(235,36,10)"/><text x="92.0445%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (50,473 samples, 4.69%)</title><rect x="87.6922%" y="421" width="4.6910%" height="15" fill="rgb(251,123,47)"/><text x="87.9422%" y="431.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (44,450 samples, 4.13%)</title><rect x="88.2520%" y="405" width="4.1312%" height="15" fill="rgb(221,13,13)"/><text x="88.5020%" y="415.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (44,450 samples, 4.13%)</title><rect x="88.2520%" y="389" width="4.1312%" height="15" fill="rgb(238,131,9)"/><text x="88.5020%" y="399.50">&lt;allo..</text></g><g><title>core::ptr::write (44,450 samples, 4.13%)</title><rect x="88.2520%" y="373" width="4.1312%" height="15" fill="rgb(211,50,8)"/><text x="88.5020%" y="383.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (50,494 samples, 4.69%)</title><rect x="87.6922%" y="453" width="4.6929%" height="15" fill="rgb(245,182,24)"/><text x="87.9422%" y="463.50">&lt;allo..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (50,494 samples, 4.69%)</title><rect x="87.6922%" y="437" width="4.6929%" height="15" fill="rgb(242,14,37)"/><text x="87.9422%" y="447.50">core:..</text></g><g><title>clear_page_erms (1,976 samples, 0.18%)</title><rect x="93.0918%" y="165" width="0.1837%" height="15" fill="rgb(246,228,12)"/><text x="93.3418%" y="175.50"></text></g><g><title>get_page_from_freelist (3,365 samples, 0.31%)</title><rect x="93.0173%" y="181" width="0.3127%" height="15" fill="rgb(213,55,15)"/><text x="93.2673%" y="191.50"></text></g><g><title>__alloc_pages (3,610 samples, 0.34%)</title><rect x="93.0127%" y="197" width="0.3355%" height="15" fill="rgb(209,9,3)"/><text x="93.2627%" y="207.50"></text></g><g><title>alloc_pages_vma (3,987 samples, 0.37%)</title><rect x="92.9821%" y="213" width="0.3706%" height="15" fill="rgb(230,59,30)"/><text x="93.2321%" y="223.50"></text></g><g><title>__handle_mm_fault (6,256 samples, 0.58%)</title><rect x="92.8156%" y="229" width="0.5814%" height="15" fill="rgb(209,121,21)"/><text x="93.0656%" y="239.50"></text></g><g><title>handle_mm_fault (7,118 samples, 0.66%)</title><rect x="92.7718%" y="245" width="0.6615%" height="15" fill="rgb(220,109,13)"/><text x="93.0218%" y="255.50"></text></g><g><title>do_user_addr_fault (8,110 samples, 0.75%)</title><rect x="92.6994%" y="261" width="0.7537%" height="15" fill="rgb(232,18,1)"/><text x="92.9494%" y="271.50"></text></g><g><title>exc_page_fault (8,176 samples, 0.76%)</title><rect x="92.6942%" y="277" width="0.7599%" height="15" fill="rgb(215,41,42)"/><text x="92.9442%" y="287.50"></text></g><g><title>asm_exc_page_fault (9,142 samples, 0.85%)</title><rect x="92.6121%" y="293" width="0.8497%" height="15" fill="rgb(224,123,36)"/><text x="92.8621%" y="303.50"></text></g><g><title>sysmalloc (10,854 samples, 1.01%)</title><rect x="92.4753%" y="309" width="1.0088%" height="15" fill="rgb(240,125,3)"/><text x="92.7253%" y="319.50"></text></g><g><title>__GI___libc_malloc (11,882 samples, 1.10%)</title><rect x="92.3859%" y="341" width="1.1043%" height="15" fill="rgb(205,98,50)"/><text x="92.6359%" y="351.50"></text></g><g><title>_int_malloc (11,584 samples, 1.08%)</title><rect x="92.4136%" y="325" width="1.0766%" height="15" fill="rgb(205,185,37)"/><text x="92.6636%" y="335.50"></text></g><g><title>__pthread_getaffinity_alias (1,077 samples, 0.10%)</title><rect x="93.4902%" y="341" width="0.1001%" height="15" fill="rgb(238,207,15)"/><text x="93.7402%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13,045 samples, 1.21%)</title><rect x="92.3851%" y="405" width="1.2124%" height="15" fill="rgb(213,199,42)"/><text x="92.6351%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13,045 samples, 1.21%)</title><rect x="92.3851%" y="389" width="1.2124%" height="15" fill="rgb(235,201,11)"/><text x="92.6351%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13,045 samples, 1.21%)</title><rect x="92.3851%" y="373" width="1.2124%" height="15" fill="rgb(207,46,11)"/><text x="92.6351%" y="383.50"></text></g><g><title>alloc::alloc::alloc (13,041 samples, 1.21%)</title><rect x="92.3855%" y="357" width="1.2120%" height="15" fill="rgb(241,35,35)"/><text x="92.6355%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (63,540 samples, 5.91%)</title><rect x="87.6922%" y="517" width="5.9054%" height="15" fill="rgb(243,32,47)"/><text x="87.9422%" y="527.50">core::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (63,540 samples, 5.91%)</title><rect x="87.6922%" y="501" width="5.9054%" height="15" fill="rgb(247,202,23)"/><text x="87.9422%" y="511.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (63,540 samples, 5.91%)</title><rect x="87.6922%" y="485" width="5.9054%" height="15" fill="rgb(219,102,11)"/><text x="87.9422%" y="495.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (63,540 samples, 5.91%)</title><rect x="87.6922%" y="469" width="5.9054%" height="15" fill="rgb(243,110,44)"/><text x="87.9422%" y="479.50">&lt;alloc::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (13,046 samples, 1.21%)</title><rect x="92.3851%" y="453" width="1.2125%" height="15" fill="rgb(222,74,54)"/><text x="92.6351%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13,046 samples, 1.21%)</title><rect x="92.3851%" y="437" width="1.2125%" height="15" fill="rgb(216,99,12)"/><text x="92.6351%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13,046 samples, 1.21%)</title><rect x="92.3851%" y="421" width="1.2125%" height="15" fill="rgb(226,22,26)"/><text x="92.6351%" y="431.50"></text></g><g><title>_extract_crng (2,990 samples, 0.28%)</title><rect x="94.0667%" y="373" width="0.2779%" height="15" fill="rgb(217,163,10)"/><text x="94.3167%" y="383.50"></text></g><g><title>chacha_block_generic (1,939 samples, 0.18%)</title><rect x="94.1644%" y="357" width="0.1802%" height="15" fill="rgb(213,25,53)"/><text x="94.4144%" y="367.50"></text></g><g><title>chacha_permute (1,744 samples, 0.16%)</title><rect x="94.1825%" y="341" width="0.1621%" height="15" fill="rgb(252,105,26)"/><text x="94.4325%" y="351.50"></text></g><g><title>entry_SYSCALL_64 (5,756 samples, 0.53%)</title><rect x="93.8269%" y="421" width="0.5350%" height="15" fill="rgb(220,39,43)"/><text x="94.0769%" y="431.50"></text></g><g><title>do_syscall_64 (5,498 samples, 0.51%)</title><rect x="93.8509%" y="405" width="0.5110%" height="15" fill="rgb(229,68,48)"/><text x="94.1009%" y="415.50"></text></g><g><title>urandom_read_nowarn.constprop.0 (4,316 samples, 0.40%)</title><rect x="93.9607%" y="389" width="0.4011%" height="15" fill="rgb(252,8,32)"/><text x="94.2107%" y="399.50"></text></g><g><title>getrandom::imp::getrandom_inner (6,819 samples, 0.63%)</title><rect x="93.7311%" y="501" width="0.6338%" height="15" fill="rgb(223,20,43)"/><text x="93.9811%" y="511.50"></text></g><g><title>getrandom::util_libc::sys_fill_exact (6,016 samples, 0.56%)</title><rect x="93.8057%" y="485" width="0.5591%" height="15" fill="rgb(229,81,49)"/><text x="94.0557%" y="495.50"></text></g><g><title>getrandom::imp::getrandom_inner::{{closure}} (5,989 samples, 0.56%)</title><rect x="93.8082%" y="469" width="0.5566%" height="15" fill="rgb(236,28,36)"/><text x="94.0582%" y="479.50"></text></g><g><title>getrandom::imp::getrandom (5,989 samples, 0.56%)</title><rect x="93.8082%" y="453" width="0.5566%" height="15" fill="rgb(249,185,26)"/><text x="94.0582%" y="463.50"></text></g><g><title>syscall (5,983 samples, 0.56%)</title><rect x="93.8088%" y="437" width="0.5561%" height="15" fill="rgb(249,174,33)"/><text x="94.0588%" y="447.50"></text></g><g><title>minesweeper_core::get_mines (79,166 samples, 7.36%)</title><rect x="87.0081%" y="533" width="7.3577%" height="15" fill="rgb(233,201,37)"/><text x="87.2581%" y="543.50">minesweepe..</text></g><g><title>rand_core::SeedableRng::from_entropy (7,183 samples, 0.67%)</title><rect x="93.6982%" y="517" width="0.6676%" height="15" fill="rgb(221,78,26)"/><text x="93.9482%" y="527.50"></text></g><g><title>minesweeper_core::get_grid::{{closure}} (81,829 samples, 7.61%)</title><rect x="86.8529%" y="549" width="7.6052%" height="15" fill="rgb(250,127,30)"/><text x="87.1029%" y="559.50">minesweepe..</text></g><g><title>std::panic::catch_unwind (85,814 samples, 7.98%)</title><rect x="86.4828%" y="645" width="7.9756%" height="15" fill="rgb(230,49,44)"/><text x="86.7328%" y="655.50">std::panic:..</text></g><g><title>std::panicking::try (85,814 samples, 7.98%)</title><rect x="86.4828%" y="629" width="7.9756%" height="15" fill="rgb(229,67,23)"/><text x="86.7328%" y="639.50">std::panick..</text></g><g><title>std::panicking::try::do_call (85,814 samples, 7.98%)</title><rect x="86.4828%" y="613" width="7.9756%" height="15" fill="rgb(249,83,47)"/><text x="86.7328%" y="623.50">std::panick..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (85,814 samples, 7.98%)</title><rect x="86.4828%" y="597" width="7.9756%" height="15" fill="rgb(215,43,3)"/><text x="86.7328%" y="607.50">&lt;core::pani..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (85,814 samples, 7.98%)</title><rect x="86.4828%" y="581" width="7.9756%" height="15" fill="rgb(238,154,13)"/><text x="86.7328%" y="591.50">std::thread..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (85,757 samples, 7.97%)</title><rect x="86.4881%" y="565" width="7.9703%" height="15" fill="rgb(219,56,2)"/><text x="86.7381%" y="575.50">std::sys_co..</text></g><g><title>_int_malloc (1,117 samples, 0.10%)</title><rect x="94.5398%" y="597" width="0.1038%" height="15" fill="rgb(233,0,4)"/><text x="94.7898%" y="607.50"></text></g><g><title>_int_malloc (1,647 samples, 0.15%)</title><rect x="94.6819%" y="581" width="0.1531%" height="15" fill="rgb(235,30,7)"/><text x="94.9319%" y="591.50"></text></g><g><title>__GI___libc_malloc (3,627 samples, 0.34%)</title><rect x="94.5293%" y="613" width="0.3371%" height="15" fill="rgb(250,79,13)"/><text x="94.7793%" y="623.50"></text></g><g><title>tcache_init.part.0 (2,396 samples, 0.22%)</title><rect x="94.6437%" y="597" width="0.2227%" height="15" fill="rgb(211,146,34)"/><text x="94.8937%" y="607.50"></text></g><g><title>__radix_tree_lookup (2,025 samples, 0.19%)</title><rect x="95.1249%" y="517" width="0.1882%" height="15" fill="rgb(228,22,38)"/><text x="95.3749%" y="527.50"></text></g><g><title>find_task_by_vpid (2,634 samples, 0.24%)</title><rect x="95.1159%" y="533" width="0.2448%" height="15" fill="rgb(235,168,5)"/><text x="95.3659%" y="543.50"></text></g><g><title>__x64_sys_sched_getaffinity (3,676 samples, 0.34%)</title><rect x="95.0196%" y="565" width="0.3416%" height="15" fill="rgb(221,155,16)"/><text x="95.2696%" y="575.50"></text></g><g><title>sched_getaffinity (3,370 samples, 0.31%)</title><rect x="95.0480%" y="549" width="0.3132%" height="15" fill="rgb(215,215,53)"/><text x="95.2980%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (4,022 samples, 0.37%)</title><rect x="95.0119%" y="597" width="0.3738%" height="15" fill="rgb(223,4,10)"/><text x="95.2619%" y="607.50"></text></g><g><title>do_syscall_64 (4,006 samples, 0.37%)</title><rect x="95.0134%" y="581" width="0.3723%" height="15" fill="rgb(234,103,6)"/><text x="95.2634%" y="591.50"></text></g><g><title>__pthread_getaffinity_alias (4,229 samples, 0.39%)</title><rect x="94.9934%" y="613" width="0.3930%" height="15" fill="rgb(227,97,0)"/><text x="95.2434%" y="623.50"></text></g><g><title>__pthread_getattr_np (9,455 samples, 0.88%)</title><rect x="94.5187%" y="629" width="0.8788%" height="15" fill="rgb(234,150,53)"/><text x="94.7687%" y="639.50"></text></g><g><title>std::sys::unix::thread::guard::current (10,105 samples, 0.94%)</title><rect x="94.4583%" y="645" width="0.9392%" height="15" fill="rgb(228,201,54)"/><text x="94.7083%" y="655.50"></text></g><g><title>__cxa_thread_atexit_impl (3,025 samples, 0.28%)</title><rect x="95.4052%" y="565" width="0.2811%" height="15" fill="rgb(222,22,37)"/><text x="95.6552%" y="575.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (3,185 samples, 0.30%)</title><rect x="95.4003%" y="597" width="0.2960%" height="15" fill="rgb(237,53,32)"/><text x="95.6503%" y="607.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::register_dtor (3,132 samples, 0.29%)</title><rect x="95.4052%" y="581" width="0.2911%" height="15" fill="rgb(233,25,53)"/><text x="95.6552%" y="591.50"></text></g><g><title>std::sys_common::thread_info::set (3,246 samples, 0.30%)</title><rect x="95.3975%" y="645" width="0.3017%" height="15" fill="rgb(210,40,34)"/><text x="95.6475%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,216 samples, 0.30%)</title><rect x="95.4003%" y="629" width="0.2989%" height="15" fill="rgb(241,220,44)"/><text x="95.6503%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,216 samples, 0.30%)</title><rect x="95.4003%" y="613" width="0.2989%" height="15" fill="rgb(235,28,35)"/><text x="95.6503%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (100,882 samples, 9.38%)</title><rect x="86.4277%" y="693" width="9.3760%" height="15" fill="rgb(210,56,17)"/><text x="86.6777%" y="703.50">&lt;alloc::boxed..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (100,812 samples, 9.37%)</title><rect x="86.4342%" y="677" width="9.3695%" height="15" fill="rgb(224,130,29)"/><text x="86.6842%" y="687.50">core::ops::fu..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (100,684 samples, 9.36%)</title><rect x="86.4461%" y="661" width="9.3576%" height="15" fill="rgb(235,212,8)"/><text x="86.6961%" y="671.50">std::thread::..</text></g><g><title>std::thread::Thread::cname (1,125 samples, 0.10%)</title><rect x="95.6992%" y="645" width="0.1046%" height="15" fill="rgb(223,33,50)"/><text x="95.9492%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_deref (1,115 samples, 0.10%)</title><rect x="95.7001%" y="629" width="0.1036%" height="15" fill="rgb(219,149,13)"/><text x="95.9501%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (101,470 samples, 9.43%)</title><rect x="86.3774%" y="709" width="9.4307%" height="15" fill="rgb(250,156,29)"/><text x="86.6274%" y="719.50">&lt;alloc::boxed..</text></g><g><title>unmap_region (2,591 samples, 0.24%)</title><rect x="96.0614%" y="565" width="0.2408%" height="15" fill="rgb(216,193,19)"/><text x="96.3114%" y="575.50"></text></g><g><title>unmap_vmas (1,103 samples, 0.10%)</title><rect x="96.1997%" y="549" width="0.1025%" height="15" fill="rgb(216,135,14)"/><text x="96.4497%" y="559.50"></text></g><g><title>__do_munmap (5,147 samples, 0.48%)</title><rect x="95.8319%" y="581" width="0.4784%" height="15" fill="rgb(241,47,5)"/><text x="96.0819%" y="591.50"></text></g><g><title>__vm_munmap (6,031 samples, 0.56%)</title><rect x="95.8281%" y="597" width="0.5605%" height="15" fill="rgb(233,42,35)"/><text x="96.0781%" y="607.50"></text></g><g><title>__x64_sys_munmap (6,260 samples, 0.58%)</title><rect x="95.8174%" y="613" width="0.5818%" height="15" fill="rgb(231,13,6)"/><text x="96.0674%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (6,486 samples, 0.60%)</title><rect x="95.8149%" y="645" width="0.6028%" height="15" fill="rgb(207,181,40)"/><text x="96.0649%" y="655.50"></text></g><g><title>do_syscall_64 (6,483 samples, 0.60%)</title><rect x="95.8152%" y="629" width="0.6025%" height="15" fill="rgb(254,173,49)"/><text x="96.0652%" y="639.50"></text></g><g><title>__GI___munmap (6,565 samples, 0.61%)</title><rect x="95.8088%" y="661" width="0.6102%" height="15" fill="rgb(221,1,38)"/><text x="96.0588%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (7,710 samples, 0.72%)</title><rect x="95.8080%" y="709" width="0.7166%" height="15" fill="rgb(206,124,46)"/><text x="96.0580%" y="719.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (7,710 samples, 0.72%)</title><rect x="95.8080%" y="693" width="0.7166%" height="15" fill="rgb(249,21,11)"/><text x="96.0580%" y="703.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (7,710 samples, 0.72%)</title><rect x="95.8080%" y="677" width="0.7166%" height="15" fill="rgb(222,201,40)"/><text x="96.0580%" y="687.50"></text></g><g><title>get_unmapped_area (1,099 samples, 0.10%)</title><rect x="96.6854%" y="565" width="0.1021%" height="15" fill="rgb(235,61,29)"/><text x="96.9354%" y="575.50"></text></g><g><title>perf_iterate_sb (5,238 samples, 0.49%)</title><rect x="96.8260%" y="533" width="0.4868%" height="15" fill="rgb(219,207,3)"/><text x="97.0760%" y="543.50"></text></g><g><title>perf_iterate_ctx (5,200 samples, 0.48%)</title><rect x="96.8295%" y="517" width="0.4833%" height="15" fill="rgb(222,56,46)"/><text x="97.0795%" y="527.50"></text></g><g><title>perf_event_mmap (5,382 samples, 0.50%)</title><rect x="96.8143%" y="549" width="0.5002%" height="15" fill="rgb(239,76,54)"/><text x="97.0643%" y="559.50"></text></g><g><title>do_mmap (7,525 samples, 0.70%)</title><rect x="96.6775%" y="581" width="0.6994%" height="15" fill="rgb(231,124,27)"/><text x="96.9275%" y="591.50"></text></g><g><title>mmap_region (6,341 samples, 0.59%)</title><rect x="96.7875%" y="565" width="0.5893%" height="15" fill="rgb(249,195,6)"/><text x="97.0375%" y="575.50"></text></g><g><title>down_write_killable (1,532 samples, 0.14%)</title><rect x="97.3769%" y="581" width="0.1424%" height="15" fill="rgb(237,174,47)"/><text x="97.6269%" y="591.50"></text></g><g><title>rwsem_down_write_slowpath (1,381 samples, 0.13%)</title><rect x="97.3909%" y="565" width="0.1284%" height="15" fill="rgb(206,201,31)"/><text x="97.6409%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (9,910 samples, 0.92%)</title><rect x="96.6507%" y="629" width="0.9210%" height="15" fill="rgb(231,57,52)"/><text x="96.9007%" y="639.50"></text></g><g><title>do_syscall_64 (9,848 samples, 0.92%)</title><rect x="96.6565%" y="613" width="0.9153%" height="15" fill="rgb(248,177,22)"/><text x="96.9065%" y="623.50"></text></g><g><title>vm_mmap_pgoff (9,667 samples, 0.90%)</title><rect x="96.6733%" y="597" width="0.8985%" height="15" fill="rgb(215,211,37)"/><text x="96.9233%" y="607.50"></text></g><g><title>__GI___mmap64 (9,965 samples, 0.93%)</title><rect x="96.6463%" y="645" width="0.9262%" height="15" fill="rgb(241,128,51)"/><text x="96.8963%" y="655.50"></text></g><g><title>down_write_killable (1,775 samples, 0.16%)</title><rect x="97.5955%" y="565" width="0.1650%" height="15" fill="rgb(227,165,31)"/><text x="97.8455%" y="575.50"></text></g><g><title>rwsem_down_write_slowpath (1,731 samples, 0.16%)</title><rect x="97.5996%" y="549" width="0.1609%" height="15" fill="rgb(228,167,24)"/><text x="97.8496%" y="559.50"></text></g><g><title>__split_vma (1,463 samples, 0.14%)</title><rect x="97.8028%" y="549" width="0.1360%" height="15" fill="rgb(228,143,12)"/><text x="98.0528%" y="559.50"></text></g><g><title>perf_event_mmap_output (1,362 samples, 0.13%)</title><rect x="98.1205%" y="501" width="0.1266%" height="15" fill="rgb(249,149,8)"/><text x="98.3705%" y="511.50"></text></g><g><title>perf_iterate_sb (2,276 samples, 0.21%)</title><rect x="98.0370%" y="533" width="0.2115%" height="15" fill="rgb(243,35,44)"/><text x="98.2870%" y="543.50"></text></g><g><title>perf_iterate_ctx (2,258 samples, 0.21%)</title><rect x="98.0387%" y="517" width="0.2099%" height="15" fill="rgb(246,89,9)"/><text x="98.2887%" y="527.50"></text></g><g><title>perf_event_mmap (2,410 samples, 0.22%)</title><rect x="98.0266%" y="549" width="0.2240%" height="15" fill="rgb(233,213,13)"/><text x="98.2766%" y="559.50"></text></g><g><title>mprotect_fixup (5,011 samples, 0.47%)</title><rect x="97.7967%" y="565" width="0.4657%" height="15" fill="rgb(233,141,41)"/><text x="98.0467%" y="575.50"></text></g><g><title>__x64_sys_mprotect (7,543 samples, 0.70%)</title><rect x="97.5802%" y="597" width="0.7010%" height="15" fill="rgb(239,167,4)"/><text x="97.8302%" y="607.50"></text></g><g><title>do_mprotect_pkey (7,492 samples, 0.70%)</title><rect x="97.5849%" y="581" width="0.6963%" height="15" fill="rgb(209,217,16)"/><text x="97.8349%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (7,738 samples, 0.72%)</title><rect x="97.5785%" y="629" width="0.7192%" height="15" fill="rgb(219,88,35)"/><text x="97.8285%" y="639.50"></text></g><g><title>do_syscall_64 (7,733 samples, 0.72%)</title><rect x="97.5790%" y="613" width="0.7187%" height="15" fill="rgb(220,193,23)"/><text x="97.8290%" y="623.50"></text></g><g><title>__GI___mprotect (7,817 samples, 0.73%)</title><rect x="97.5725%" y="645" width="0.7265%" height="15" fill="rgb(230,90,52)"/><text x="97.8225%" y="655.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (128,726 samples, 11.96%)</title><rect x="86.3701%" y="725" width="11.9638%" height="15" fill="rgb(252,106,19)"/><text x="86.6201%" y="735.50">std::sys::unix::th..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (19,468 samples, 1.81%)</title><rect x="96.5246%" y="709" width="1.8094%" height="15" fill="rgb(206,74,20)"/><text x="96.7746%" y="719.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (19,468 samples, 1.81%)</title><rect x="96.5246%" y="693" width="1.8094%" height="15" fill="rgb(230,138,44)"/><text x="96.7746%" y="703.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (18,199 samples, 1.69%)</title><rect x="96.6425%" y="677" width="1.6914%" height="15" fill="rgb(235,182,43)"/><text x="96.8925%" y="687.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (18,199 samples, 1.69%)</title><rect x="96.6425%" y="661" width="1.6914%" height="15" fill="rgb(242,16,51)"/><text x="96.8925%" y="671.50"></text></g><g><title>start_thread (388,398 samples, 36.10%)</title><rect x="62.3044%" y="741" width="36.0978%" height="15" fill="rgb(248,9,4)"/><text x="62.5544%" y="751.50">start_thread</text></g><g><title>__GI___clone (1,054,269 samples, 97.98%)</title><rect x="0.9098%" y="757" width="97.9841%" height="15" fill="rgb(210,31,22)"/><text x="1.1598%" y="767.50">__GI___clone</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (5,290 samples, 0.49%)</title><rect x="98.4023%" y="741" width="0.4917%" height="15" fill="rgb(239,54,39)"/><text x="98.6523%" y="751.50"></text></g><g><title>__pthread_create_2_1 (1,306 samples, 0.12%)</title><rect x="98.9866%" y="37" width="0.1214%" height="15" fill="rgb(230,99,41)"/><text x="99.2366%" y="47.50"></text></g><g><title>std::sys::unix::thread::Thread::new (1,319 samples, 0.12%)</title><rect x="98.9861%" y="53" width="0.1226%" height="15" fill="rgb(253,106,12)"/><text x="99.2361%" y="63.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (2,302 samples, 0.21%)</title><rect x="98.8957%" y="373" width="0.2139%" height="15" fill="rgb(213,46,41)"/><text x="99.1457%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,302 samples, 0.21%)</title><rect x="98.8957%" y="357" width="0.2139%" height="15" fill="rgb(215,133,35)"/><text x="99.1457%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,302 samples, 0.21%)</title><rect x="98.8957%" y="341" width="0.2139%" height="15" fill="rgb(213,28,5)"/><text x="99.1457%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,302 samples, 0.21%)</title><rect x="98.8957%" y="325" width="0.2139%" height="15" fill="rgb(215,77,49)"/><text x="99.1457%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,302 samples, 0.21%)</title><rect x="98.8957%" y="309" width="0.2139%" height="15" fill="rgb(248,100,22)"/><text x="99.1457%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,302 samples, 0.21%)</title><rect x="98.8957%" y="293" width="0.2139%" height="15" fill="rgb(208,67,9)"/><text x="99.1457%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,302 samples, 0.21%)</title><rect x="98.8957%" y="277" width="0.2139%" height="15" fill="rgb(219,133,21)"/><text x="99.1457%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,302 samples, 0.21%)</title><rect x="98.8957%" y="261" width="0.2139%" height="15" fill="rgb(246,46,29)"/><text x="99.1457%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,302 samples, 0.21%)</title><rect x="98.8957%" y="245" width="0.2139%" height="15" fill="rgb(246,185,52)"/><text x="99.1457%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,302 samples, 0.21%)</title><rect x="98.8957%" y="229" width="0.2139%" height="15" fill="rgb(252,136,11)"/><text x="99.1457%" y="239.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (2,302 samples, 0.21%)</title><rect x="98.8957%" y="213" width="0.2139%" height="15" fill="rgb(219,138,53)"/><text x="99.1457%" y="223.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (2,302 samples, 0.21%)</title><rect x="98.8957%" y="197" width="0.2139%" height="15" fill="rgb(211,51,23)"/><text x="99.1457%" y="207.50"></text></g><g><title>main::criterion_benchmark::{{closure}} (2,302 samples, 0.21%)</title><rect x="98.8957%" y="181" width="0.2139%" height="15" fill="rgb(247,221,28)"/><text x="99.1457%" y="191.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (2,302 samples, 0.21%)</title><rect x="98.8957%" y="165" width="0.2139%" height="15" fill="rgb(251,222,45)"/><text x="99.1457%" y="175.50"></text></g><g><title>main::criterion_benchmark::{{closure}}::{{closure}} (2,232 samples, 0.21%)</title><rect x="98.9022%" y="149" width="0.2074%" height="15" fill="rgb(217,162,53)"/><text x="99.1522%" y="159.50"></text></g><g><title>minesweeper_core::get_grid (2,232 samples, 0.21%)</title><rect x="98.9022%" y="133" width="0.2074%" height="15" fill="rgb(229,93,14)"/><text x="99.1522%" y="143.50"></text></g><g><title>std::thread::spawn (1,335 samples, 0.12%)</title><rect x="98.9856%" y="117" width="0.1241%" height="15" fill="rgb(209,67,49)"/><text x="99.2356%" y="127.50"></text></g><g><title>std::thread::Builder::spawn (1,335 samples, 0.12%)</title><rect x="98.9856%" y="101" width="0.1241%" height="15" fill="rgb(213,87,29)"/><text x="99.2356%" y="111.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1,335 samples, 0.12%)</title><rect x="98.9856%" y="85" width="0.1241%" height="15" fill="rgb(205,151,52)"/><text x="99.2356%" y="95.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (1,335 samples, 0.12%)</title><rect x="98.9856%" y="69" width="0.1241%" height="15" fill="rgb(253,215,39)"/><text x="99.2356%" y="79.50"></text></g><g><title>std::panic::catch_unwind (3,863 samples, 0.36%)</title><rect x="98.8955%" y="613" width="0.3590%" height="15" fill="rgb(221,220,41)"/><text x="99.1455%" y="623.50"></text></g><g><title>std::panicking::try (3,863 samples, 0.36%)</title><rect x="98.8955%" y="597" width="0.3590%" height="15" fill="rgb(218,133,21)"/><text x="99.1455%" y="607.50"></text></g><g><title>std::panicking::try::do_call (3,863 samples, 0.36%)</title><rect x="98.8955%" y="581" width="0.3590%" height="15" fill="rgb(221,193,43)"/><text x="99.1455%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,863 samples, 0.36%)</title><rect x="98.8955%" y="565" width="0.3590%" height="15" fill="rgb(240,128,52)"/><text x="99.1455%" y="575.50"></text></g><g><title>std::rt::lang_start::{{closure}} (3,863 samples, 0.36%)</title><rect x="98.8955%" y="549" width="0.3590%" height="15" fill="rgb(253,114,12)"/><text x="99.1455%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,863 samples, 0.36%)</title><rect x="98.8955%" y="533" width="0.3590%" height="15" fill="rgb(215,223,47)"/><text x="99.1455%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3,863 samples, 0.36%)</title><rect x="98.8955%" y="517" width="0.3590%" height="15" fill="rgb(248,225,23)"/><text x="99.1455%" y="527.50"></text></g><g><title>main::main (3,863 samples, 0.36%)</title><rect x="98.8955%" y="501" width="0.3590%" height="15" fill="rgb(250,108,0)"/><text x="99.1455%" y="511.50"></text></g><g><title>main::benches (3,863 samples, 0.36%)</title><rect x="98.8955%" y="485" width="0.3590%" height="15" fill="rgb(228,208,7)"/><text x="99.1455%" y="495.50"></text></g><g><title>main::criterion_benchmark (3,863 samples, 0.36%)</title><rect x="98.8955%" y="469" width="0.3590%" height="15" fill="rgb(244,45,10)"/><text x="99.1455%" y="479.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (3,863 samples, 0.36%)</title><rect x="98.8955%" y="453" width="0.3590%" height="15" fill="rgb(207,125,25)"/><text x="99.1455%" y="463.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (3,863 samples, 0.36%)</title><rect x="98.8955%" y="437" width="0.3590%" height="15" fill="rgb(210,195,18)"/><text x="99.1455%" y="447.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (3,863 samples, 0.36%)</title><rect x="98.8955%" y="421" width="0.3590%" height="15" fill="rgb(249,80,12)"/><text x="99.1455%" y="431.50"></text></g><g><title>criterion::analysis::common (3,863 samples, 0.36%)</title><rect x="98.8955%" y="405" width="0.3590%" height="15" fill="rgb(221,65,9)"/><text x="99.1455%" y="415.50"></text></g><g><title>criterion::routine::Routine::sample (3,861 samples, 0.36%)</title><rect x="98.8957%" y="389" width="0.3588%" height="15" fill="rgb(235,49,36)"/><text x="99.1457%" y="399.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (1,559 samples, 0.14%)</title><rect x="99.1096%" y="373" width="0.1449%" height="15" fill="rgb(225,32,20)"/><text x="99.3596%" y="383.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (1,559 samples, 0.14%)</title><rect x="99.1096%" y="357" width="0.1449%" height="15" fill="rgb(215,141,46)"/><text x="99.3596%" y="367.50"></text></g><g><title>main::criterion_benchmark::{{closure}} (1,559 samples, 0.14%)</title><rect x="99.1096%" y="341" width="0.1449%" height="15" fill="rgb(250,160,47)"/><text x="99.3596%" y="351.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (1,559 samples, 0.14%)</title><rect x="99.1096%" y="325" width="0.1449%" height="15" fill="rgb(216,222,40)"/><text x="99.3596%" y="335.50"></text></g><g><title>main::criterion_benchmark::{{closure}}::{{closure}} (1,514 samples, 0.14%)</title><rect x="99.1138%" y="309" width="0.1407%" height="15" fill="rgb(234,217,39)"/><text x="99.3638%" y="319.50"></text></g><g><title>minesweeper_core::get_grid (1,514 samples, 0.14%)</title><rect x="99.1138%" y="293" width="0.1407%" height="15" fill="rgb(207,178,40)"/><text x="99.3638%" y="303.50"></text></g><g><title>_start (3,864 samples, 0.36%)</title><rect x="98.8955%" y="757" width="0.3591%" height="15" fill="rgb(221,136,13)"/><text x="99.1455%" y="767.50"></text></g><g><title>__libc_start_main_alias_2 (3,864 samples, 0.36%)</title><rect x="98.8955%" y="741" width="0.3591%" height="15" fill="rgb(249,199,10)"/><text x="99.1455%" y="751.50"></text></g><g><title>__libc_start_call_main (3,864 samples, 0.36%)</title><rect x="98.8955%" y="725" width="0.3591%" height="15" fill="rgb(249,222,13)"/><text x="99.1455%" y="735.50"></text></g><g><title>main (3,864 samples, 0.36%)</title><rect x="98.8955%" y="709" width="0.3591%" height="15" fill="rgb(244,185,38)"/><text x="99.1455%" y="719.50"></text></g><g><title>std::rt::lang_start_internal (3,864 samples, 0.36%)</title><rect x="98.8955%" y="693" width="0.3591%" height="15" fill="rgb(236,202,9)"/><text x="99.1455%" y="703.50"></text></g><g><title>std::panic::catch_unwind (3,864 samples, 0.36%)</title><rect x="98.8955%" y="677" width="0.3591%" height="15" fill="rgb(250,229,37)"/><text x="99.1455%" y="687.50"></text></g><g><title>std::panicking::try (3,864 samples, 0.36%)</title><rect x="98.8955%" y="661" width="0.3591%" height="15" fill="rgb(206,174,23)"/><text x="99.1455%" y="671.50"></text></g><g><title>std::panicking::try::do_call (3,864 samples, 0.36%)</title><rect x="98.8955%" y="645" width="0.3591%" height="15" fill="rgb(211,33,43)"/><text x="99.1455%" y="655.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (3,864 samples, 0.36%)</title><rect x="98.8955%" y="629" width="0.3591%" height="15" fill="rgb(245,58,50)"/><text x="99.1455%" y="639.50"></text></g><g><title>delay_halt (2,748 samples, 0.26%)</title><rect x="99.5187%" y="629" width="0.2554%" height="15" fill="rgb(244,68,36)"/><text x="99.7687%" y="639.50"></text></g><g><title>delay_halt_mwaitx (2,613 samples, 0.24%)</title><rect x="99.5312%" y="613" width="0.2429%" height="15" fill="rgb(232,229,15)"/><text x="99.7812%" y="623.50"></text></g><g><title>amd_pmu_wait_on_overflow (3,362 samples, 0.31%)</title><rect x="99.4887%" y="645" width="0.3125%" height="15" fill="rgb(254,30,23)"/><text x="99.7387%" y="655.50"></text></g><g><title>amd_pmu_disable_all (4,598 samples, 0.43%)</title><rect x="99.4874%" y="661" width="0.4273%" height="15" fill="rgb(235,160,14)"/><text x="99.7374%" y="671.50"></text></g><g><title>x86_pmu_disable_all (1,222 samples, 0.11%)</title><rect x="99.8012%" y="645" width="0.1136%" height="15" fill="rgb(212,155,44)"/><text x="100.0512%" y="655.50"></text></g><g><title>ctx_sched_out (4,756 samples, 0.44%)</title><rect x="99.4818%" y="677" width="0.4420%" height="15" fill="rgb(226,2,50)"/><text x="99.7318%" y="687.50"></text></g><g><title>perf_event_exit_task (5,041 samples, 0.47%)</title><rect x="99.4698%" y="693" width="0.4685%" height="15" fill="rgb(234,177,6)"/><text x="99.7198%" y="703.50"></text></g><g><title>[vmlinux] (6,078 samples, 0.56%)</title><rect x="99.4138%" y="725" width="0.5649%" height="15" fill="rgb(217,24,9)"/><text x="99.6638%" y="735.50"></text></g><g><title>do_exit (6,078 samples, 0.56%)</title><rect x="99.4138%" y="709" width="0.5649%" height="15" fill="rgb(220,13,46)"/><text x="99.6638%" y="719.50"></text></g><g><title>entry_SYSCALL_64 (7,780 samples, 0.72%)</title><rect x="99.2558%" y="757" width="0.7231%" height="15" fill="rgb(239,221,27)"/><text x="99.5058%" y="767.50"></text></g><g><title>do_syscall_64 (6,080 samples, 0.57%)</title><rect x="99.4138%" y="741" width="0.5651%" height="15" fill="rgb(222,198,25)"/><text x="99.6638%" y="751.50"></text></g><g><title>main-e54c20ddfa (1,075,659 samples, 99.97%)</title><rect x="0.0274%" y="773" width="99.9721%" height="15" fill="rgb(211,99,13)"/><text x="0.2774%" y="783.50">main-e54c20ddfa</text></g><g><title>all (1,075,959 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(232,111,31)"/><text x="0.2500%" y="799.50"></text></g></svg></svg>